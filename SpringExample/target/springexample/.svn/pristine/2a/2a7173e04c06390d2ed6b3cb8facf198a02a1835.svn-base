<%@ page language="java" contentType="text/html; charset=GBK"
    pageEncoding="GBK"%>

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=GBK">
	<title>保护白名单表记录列表</title>
	
</head>
<script type="text/javascript">

	Ext.onReady(function(){
		//定义数据集对象
		var store = new Ext.data.Store({//配置分组数据集
			reader: new Ext.data.XmlReader({
				totalRecords: "results",
				record: "ProtectRecord",
				id: "id"
				},
				Ext.data.Record.create([
					{name: 'id'},
					{name: 'url'},
					{name: 'type'},
					{name: 'ip'},
					{name: 'user'},
					{name: 'sub_date', type: 'date', dateFormat: 'Y-m-d H:i:s'},
					{name: 'info'}
				])
			),
			proxy : new Ext.data.HttpProxy({
				url : 'protect.do?method=getProtectList'
			}),
			sortInfo: {field: 'sub_date', direction: 'DESC'},
	  		remoteSort: true
		})
		<%//根据权限信息显示工具栏
		StringBuffer toolbar_str = new StringBuffer();
	    if(  ( (Integer)session.getAttribute("tb_protective_white_add") )==1)
	    	toolbar_str.append("{text : '新增',iconCls:'add',handler : showAdd},");
	    if(  ( (Integer)session.getAttribute("tb_protective_white_delete") )==1)
	    	toolbar_str.append("{text : '删除',iconCls:'remove',handler : showDelete},");
	    toolbar_str.deleteCharAt(toolbar_str.length()-1);
	    %>
		//创建工具栏组件
		var toolbar = new Ext.Toolbar([
			<%=toolbar_str.toString()%>
		]);
		//将 是否封禁首页和是否留首封站 的代码解析成 文本
		function booleantag(val){
	        if(val == 1){
	            return '是';
	        }else{
	            return '否';
	        }
    	}
    	//创建分页工具栏
    	var pagingBar = new Ext.PagingToolbar({
	        pageSize: 18,
	        store: store,
	        displayInfo: true,
	        displayMsg: '显示 {0} - {1} , 共 {2} 条记录',
	        emptyMsg: "没有任何记录",
	        items:['-']
    	});
		//创建Grid表格组件
		var cb = new Ext.grid.CheckboxSelectionModel();
		//创建过滤器
		var filters = new Ext.grid.GridFilters({
		  filters:[
		    {type: 'numeric',  dataIndex: 'id'},
		    {type: 'string',  dataIndex: 'url'},
		    {type: 'boolean',  dataIndex: 'type'},
		    {type: 'string',  dataIndex: 'user'},
		    {type: 'date',  dataIndex: 'sub_date'},
		    {type: 'string',  dataIndex: 'info'}
		]});
		var recordGrid = new Ext.grid.GridPanel({
			applyTo : 'grid-div',
			tbar : toolbar,
			frame:true,
			loadMask: true,
			plugins: filters,
			store: store,
			viewConfig : {
				autoFill : true
			},
			sm : cb,
			columns: [//配置表格列
				new Ext.grid.RowNumberer({
					header : '行号',
					width : 40
				}),//表格行号组件
				cb,
				{header: "编号", width: 30, dataIndex: 'id', sortable: true},
				{header: "URL", width: 30, dataIndex: 'url', sortable: true},
				{header: "提交用户", width: 30, dataIndex: 'user', sortable: true},
				{header: "提交时间", width: 30, dataIndex: 'sub_date', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s'), sortable: true},
				{header: "备注信息", width: 30, dataIndex: 'info', sortable: true}
			],
			
	        // paging bar on the bottom
	        bbar: pagingBar
			
		});
			
		// trigger the data store load
    	store.load({params:{start:0, limit:18}});
    	
		//创建新增或修改域名表记录信息的form表单
		Ext.QuickTips.init();
		Ext.form.Field.prototype.msgTarget = 'side';//统一指定错误信息提示方式
		var inputForm = new Ext.FormPanel({
			labelSeparator : ":",
			frame:true,
			border:false,
			autoHeight: true,
			//增加表单键盘事件
	        keys:[
	         {
	             key: [10,13],
	             fn: submitForm
	         } ],
			
			items : [
				{
					xtype:'textfield',
					width : 200,
					allowBlank : false,
					blankText : 'URL不能为空',
					name : 'url',
					fieldLabel:'<font color=red>*</font>URL'
				},{
                	xtype: 'radio',
                    fieldLabel: '<font color=red>*</font>精确匹配:',
                    checked: true,
                    labelSeparator: '',
                    boxLabel: '是',
                    name: 'type',
                    inputValue: 1
                },{
                	xtype: 'radio',
                    fieldLabel: '',
                    labelSeparator: '',
                    boxLabel: '否',
                    name: 'type',
                    inputValue: 0
                },{
					xtype:'textarea',
					width : 200,
					maxLength : 255,
					maxLengthText : '备注信息最大支持255个字符',
					name : 'info',
					fieldLabel:'备注信息'
				},{
					xtype:'hidden',
					name : 'id'
				}
			],
			buttons:[
				{
					text : '提交',
					handler : submitForm
				},
				{
					text : '关闭',
					handler : function(){
						win.hide();
					}
				}
			]
		});
		//创建弹出窗口
		var win = new Ext.Window({
			layout:'fit',
		    width:380,
		    closeAction:'hide',
			resizable : false,
			shadow : true,
			modal :true,
		    closable:true,
		    bodyStyle:'padding:5 5 5 5',
		    animCollapse:true,
			items:[inputForm]
		});
		win.width = 380;
		win.height = 240;
		
		//显示新建表记录窗口
		function showAdd(){
			inputForm.form.reset();
			inputForm.isAdd = true;
			win.setTitle("新增记录信息");
			win.show();
		}
		//显示修改表记录窗口
		/*
		function showModify(){
			var recordList = getCheckedIdList();
			var num = recordList.length;
			if(num > 1){
				Ext.MessageBox.alert("提示","每次只能修改一条记录信息。")
			}else if(num == 1){
				inputForm.isAdd = false;
				win.setTitle("修改记录信息");
				win.show();
				var recordId = recordList[0];
				loadForm(recordId);
			}
		}*/
		//显示删除表记录对话框
		function showDelete(){
			var recordIdList = getCheckedIdList();
			var num = recordIdList.length;
			if(num == 0){
				return;
			}
			Ext.MessageBox.confirm("提示","您确定要删除所选记录吗？",function(btnId){
				if(btnId == 'yes')
					deleteRecord(recordIdList);
			})
		}
		//删除记录
		function deleteRecord(recordIdList){
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在删除记录信息请稍后......'
			});
			Ext.Ajax.request({
				url : 'protect.do?method=deleteProtect',
				params : {recordIdList : recordIdList.toString()},
				method : 'POST',
				success : function(response,options){
					msgTip.hide();
					var result = Ext.util.JSON.decode(response.responseText);
					if(result.success){
						//服务器端数据成功删除后，同步删除客户端列表中的数据
						for(var i=0;i<recordIdList.length;i++)
						{
							var index = store.find('id',recordIdList[i]);
							if(index != -1){
								var rec = store.getAt(index)
								store.remove(rec);
							}
						}
						Ext.Msg.alert('提示','删除记录信息成功。');
					}else{
						Ext.Msg.alert('提示','该记录已包含'+result.num+'本书籍信息不能删除！');
					}
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','删除域名表记录请求失败！');
				}
			});
		}
		//加载表单数据
		/*function loadForm(recordId){
			inputForm.form.load({
				waitMsg : '正在加载数据请稍后',//提示信息
				waitTitle : '提示',//标题
				url : 'protect.do?method=getRecordById',//请求的url地址
				params : {recordId : recordId},
				method:'GET',//请求方式
				success:function(form,action){//加载成功的处理函数
				},
				failure:function(form,action){//加载失败的处理函数
					Ext.Msg.alert('提示','数据加载失败');
				}
			});
		}*/
		//提交表单数据
		function submitForm(){
			//判断当前执行的提交操作，isAdd为true表示执行用户-对象-角色关联表记录新增操作，false表示执行用户-对象-角色关联表记录修改操作
			if( inputForm.form.isValid() ){
				if(inputForm.isAdd){
					//新增用户-对象-角色关联表记录信息
					inputForm.form.submit({
						clientValidation:true,//进行客户端验证
						waitMsg : '正在提交数据请稍后',//提示信息
						waitTitle : '提示',//标题
						url : 'protect.do?method=addProtect',//请求的url地址
						method:'POST',//请求方式
						success:function(form,action){//加载成功的处理函数
							win.hide();
							store.load({params:{start:0, limit:18}});
							Ext.Msg.alert('提示','新增记录成功');
						},
						failure:function(form,action){//加载失败的处理函数
							var failcause = action.result.cause;
							Ext.MessageBox.show({
						           title: '提示',
						           msg: '新增保护白名单记录失败。原因是:<br>'+failcause,
						           buttons: Ext.MessageBox.OK,
						           icon: Ext.MessageBox.WARNING
						        });
						}
					});
				}else{
					//修改表记录信息
					inputForm.form.submit({
						clientValidation:true,//进行客户端验证
						waitMsg : '正在提交数据请稍后',//提示信息
						waitTitle : '提示',//标题
						url : 'protect.do?method=modifyProtect',//请求的url地址
						method:'POST',//请求方式
						success:function(form,action){//加载成功的处理函数
							win.hide();
							store.load({params:{start:0, limit:18}});
							Ext.Msg.alert('提示','修改保护白名单表记录成功');
						},
						failure:function(form,action){//加载失败的处理函数
							var failcause = action.result.cause;
							Ext.MessageBox.show({
					           title: '提示',
					           msg: '修改保护白名单记录失败。原因是:<br>'+failcause,
					           buttons: Ext.MessageBox.OK,
					           icon: Ext.MessageBox.WARNING
					        });
						}
					});
				}
			}
		}
		//明细数据修改后，同步更新用户-对象-角色关联表记录列表信息
		function updateList(recordId){
			var fields = getFormFieldsObj(domainRecordId);
			var index = store.find('id',fields.id);
			if(index != -1){
				var item = store.getAt(index);
				for(var fieldName in fields){
					item.set(fieldName,fields[fieldName]);
				}
				store.commitChanges();
			}else{
				var rec = new Ext.data.Record(fields);
				store.add(rec);
			}
		}
		//取得表单数据
		function getFormFieldsObj(domainRecordId){
			var fields = inputForm.items;
			var obj = {};
			for(var i = 0 ; i < fields.length ; i++){
				var item = 	fields.itemAt(i);
				var value = item.getValue();
				obj[item.name] = value;
			}
			if(Ext.isEmpty(obj['id'])){
				obj['id'] = domainRecordId;
			}
			//补充另外两个属性tag_block和tag_reversible
			if( Ext.getCmp('tag_block_group').items.get(0).checked )
				obj['tag_block'] = 1 ;
			else
				obj['tag_block'] = 0 ;
			if( Ext.getCmp('tag_reversible_group').items.get(0).checked )
				obj['tag_reversible'] = 1 ;
			else
				obj['tag_reversible'] = 0 ;
			return obj;
		}
		//取得所选记录信息
		function getCheckedIdList(){
			var recs = recordGrid.getSelectionModel().getSelections();
			var list = [];
			if(recs.length == 0){
				Ext.MessageBox.alert('提示','请选择要进行操作的记录信息！');
			}else{
				for(var i = 0 ; i < recs.length ; i++){
					var rec = recs[i];
					list.push(rec.get('id'))
				}
			}
			return list;
		}
		
		//开始查询代码
		function query(tag){
			//新增表记录信息
			var query_url ;
			if(tag)
				query_url = document.getElementById("query_url").value;
			else{
				query_url = '';
				document.getElementById("query_url").value='';
			}
			var query_matchType;
			if(document.getElementsByName("query_matchType")[0].checked)
				query_matchType = 1;
			else
				query_matchType = 0;
			var url = "protect.do?method=getProtectList&query_url="+escape(query_url)+"&query_matchType="+query_matchType;
			store.proxy.conn.url = url;
			store.load({params:{start:0, limit:18}});
		}
		//开始查询表单部分
		var dr = new Ext.FormPanel({
	    	labelWidth: 125,
	        frame: true,
	  	  	bodyStyle:'padding:5px 5px 0',
	        defaults: {width: 175},
	      	//增加表单键盘事件
	        keys:[
	         {
	             key: [10,13],
	             fn:query
	         } ],
	        items: [{
	        	xtype:'textfield',
				width : 400,
				id : 'query_url',
				name : 'query_url',
				fieldLabel:'URL'
	        },

	        {
	            layout:'column',
	            width : 800,
	            border:false,
	            items:[
	                {
	                    columnWidth:.5,
	                    layout: 'form',
	                    border:false,
	                    items: [{
	                        xtype:'radio',
	                        fieldLabel:'查找方式',
	                        checked: true,
	                        boxLabel:'精确查找',
	                        name:'query_matchType',
	                        anchor:'100%',
	                        inputValue: 1
	                    }]
	                },
	                {   
	                    columnWidth:.5,
	                    layout: 'form',
	                    border:false,
	                    items: [{
	                        xtype:'radio',
	                        boxLabel:'模糊查找',
	                        hideLabel: true,
	                        name:'query_matchType',
	                        anchor:'100%',
	                        inputValue: 0
	                    }]
	                }
	              ]
            }],
			buttons:[
				{
					text : '查询',
					handler : function(){
						query(true);
					}
				},
				{
					text : '返回',
					handler : function(){
						query(false);
					}
				}
			]
	      });
	      dr.render('dr');
	});
</script>
<body>
<div id="dr" style="width:100%;height:18%;"></div>
<div id='grid-div' style="width:100%; height:82%;"/>
</body>
</html>