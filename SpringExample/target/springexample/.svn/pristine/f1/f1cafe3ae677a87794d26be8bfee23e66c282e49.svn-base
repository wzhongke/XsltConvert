<%@ page language="java" contentType="text/html; charset=GBK"
    pageEncoding="GBK"%>
<%@ page import="java.sql.Timestamp,java.util.Date,java.text.SimpleDateFormat,com.sohu.frontweb.base.action.UmisAction"%>

<%
    SimpleDateFormat sdformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    Timestamp timestamp = new Timestamp(new Date().getTime());
   String currentTime =  sdformat.format(timestamp);
%>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=GBK">
	<title>域名表记录列表</title>
	<script type="text/javascript">
	tablename = "hint_webpage_blacklist";
	syncHubType = "web";
	pageSize = 18;
	</script>
	<script type="text/javascript" src="/js/quickSync.js"></script>
	<script type="text/javascript" src="/js/tabinsert.js"></script>
</head>
<script type="text/javascript">
	Ext.namespace('Ext.exampledata');
	Ext.exampledata.matchrule_list = [
 		['2','2级:模糊文字匹配', 'The Heart of Dixie'],
        ['3','3级:精确文字匹配', 'The Land of the Midnight Sun']
     ];
     
    Ext.exampledata.encombox_list = [
		['0','不屏蔽', 'The Heart of Dixie'],
	    ['1','条件词封禁', 'The Land of the Midnight Sun'],
	    ['2','结果词封禁', 'The Land of the Midnight Sun'],
	    ['3','两者都屏蔽', 'The Land of the Midnight Sun']
	 ]; 
    
 
     
	Ext.onReady(function(){
		var exportConditionUrl = 'hint_webpage.do?method=exportRecord';
		//创建新增或单独修改表记录信息的form表单
		Ext.QuickTips.init();
		Ext.form.Field.prototype.msgTarget = 'side';//统一指定错误信息提示方式


		var exportConditionUrl = 'hint_webpage.do?method=getRecordList';


		
		//定义数据集对象
		var store = new Ext.data.Store({//配置分组数据集
			reader: new Ext.data.XmlReader({
				totalRecords: "results",
				record: "WebhintRecord",
				id: "id"
			},
			Ext.data.Record.create([
				{name: 'id'},
				{name: 'keyword'},				
				{name: 'type'},
				{name: 'synchronized_tag'},
				{name: 'sub_user'},
				{name: 'hint_validate_time',type:'date', dateFormat: 'Y-m-d H:i:s'},
				<%if(UmisAction.UMIS_HINT_USE_NEW_SYNC){%>
				{name: 'condword'},
				{name: 'hint_valid_time',type:'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'hint_invalid_time',type:'date', dateFormat: 'Y-m-d H:i:s'},				
				{name: 'sub_date', type: 'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'sync_status'},
                {name: 'sync_message'},
                {name: 'sync_modify_time',type:'date',dateFormat:'Y-m-d H:i:s'}
                <%}else{%>
                {name: 'sub_date', type: 'date', dateFormat: 'Y-m-d H:i:s'}
                <%
                }%>
			])
			),
			proxy : new Ext.data.HttpProxy({
				url : 'hint_webpage.do?method=getRecordList'
			}),
			sortInfo: {field: 'sub_date', direction: 'DESC'},
	  		remoteSort: true
		})

		
		<%//根据权限信息显示工具栏
		StringBuffer toolbar_str = new StringBuffer();
    	toolbar_str.append("{text : '新增',iconCls:'add',handler : showAdd},");
    	toolbar_str.append("{text : '修改',iconCls:'option',handler : showModify},");
    	toolbar_str.append("{text : '删除',iconCls:'remove',handler : showDelete},");
    	//toolbar_str.append("{text : '同步词表',iconCls:'batch-remove',handler : synchronize},");
    	if(UmisAction.UMIS_HINT_USE_NEW_SYNC){    	    
    	    toolbar_str.append("{text : '快速同步new',iconCls:'batch-remove',handler : doSync},");
    	    toolbar_str.append("{text : '取消同步',iconCls:'batch-remove',handler : doCancel},");
    	}
	    toolbar_str.deleteCharAt(toolbar_str.length()-1);
	    %>
		//创建工具栏组件
		var toolbar = new Ext.Toolbar([
		    <%=toolbar_str.toString()%>
		]);
    	
    	//创建分页工具栏
    	var pagingBar = new Ext.PagingToolbar({
	        pageSize: 18,
	        store: store,
	        displayInfo: true,
	        displayMsg: '显示 {0} - {1} , 共 {2} 条记录',
	        emptyMsg: "没有任何记录",
	        items:[{text : '导出',iconCls:'option',handler : exportExcel}]
    	});
		//创建Grid表格组件
		var cb = new Ext.grid.CheckboxSelectionModel();
		//创建过滤器
		var filters = new Ext.grid.GridFilters({
		  filters:[
		    {type: 'numeric',  dataIndex: 'id'},
		    {type: 'string',  dataIndex: 'url'},
		    {type: 'boolean', dataIndex: 'tag_block'},
		    {type: 'boolean', dataIndex: 'tag_reversible'},
		    {
		      type: 'list',  
		      dataIndex: 'extra_attr', 
		      options: ['无价值', '死链', '非中文'],
		      phpMode: true
		    },
		    {type: 'string',  dataIndex: 'user'},
		    {type: 'date',  dataIndex: 'sub_date'},
		    {type: 'string',  dataIndex: 'info'}
		]});



		function typeRenderer(val){
	        if(val == 1){
	            return '精确匹配';
	        }else if(val == 2){
	            return '模糊匹配';
	        }else if(val == 3){
	            return "组合词";
	        }else if(val == 4){
	        	return "精确匹配过滤";
	        }else
		        return '';
    	}

		

		//开始查询表单部分
		var dr = new Ext.FormPanel({
	    	labelWidth: 125,
	        frame: true,
	  	  	bodyStyle:'padding:5px 5px 0',
	  	  	width: 960,
	  	  	labelAlign: 'left',
	        defaults: {width: 275},
	      	//增加表单键盘事件
	        keys:[
	         {
	             key: [10,13],
	             fn:query
	         } ],
	         items: [{
		        	xtype:'textfield',
					width : 400,
					id : 'query_keyword',
					name : 'query_keyword',
					fieldLabel:'结果词'
		        },{
                    xtype:'radiogroup',
                    fieldLabel:'结果词查找方式',
                    labelSeparator:':',
                    columns:2,
                    width:300,
                    items:[
                           {boxLabel:'精确查找',name:'query_keyword_matchType',inputValue:1,checked:true,border:false},
                           {boxLabel:'模糊查找',name:'query_keyword_matchType',inputValue:0,border:false}
                    ]                   
                },
                <%if(UmisAction.UMIS_HINT_USE_NEW_SYNC){%>
                {
                    xtype:'textfield',
                    width : 400,
                    id : 'query_condword',
                    name : 'query_condword',
                    fieldLabel:'条件词'
                },
                <%}%>
                {
		            xtype:'radiogroup',
		            fieldLabel:'条件词查找方式',
		            labelSeparator:':',
		            columns:2,
		            width:300,
		            items:[
		                   {boxLabel:'精确查找',name:'query_condword_matchType',inputValue:1,checked:true,border:false},
		                   {boxLabel:'模糊查找',name:'query_condword_matchType',inputValue:0,border:false}
		            ]		            
		        },{
		            xtype:'textfield',
		            id:'query_sub_user',
		            name:'query_sub_user',
		            fieldLabel:'提交人',
		            width:400
		        },{
	        	    xtype:'radiogroup',
	        	    fieldLabel:'匹配类型',
	        	    labelSeparator:':',
	        	    columns:5,
	        	    labelStyle: 'width: 100px;',
	        	    width:500,
	        	    items:[
	        	          {boxLabel:'全部',inputValue:-100,checked:true,name:"query_type",border:false},
	        	           {boxLabel:'模糊匹配',inputValue:2,name:"query_type",labelStyle:'width: 185px;',border:false},
	        	           {boxLabel:'精确匹配',inputValue:1,name:"query_type",labelStyle:'width: 185px;',border:false},
	        	           {boxLabel:'组合匹配',inputValue:3,name:"query_type",labelStyle:'width: 185px;',border:false},
	        	           {boxLabel:'精确匹配过滤',inputValue:4,name:"query_type",labelStyle:'width: 255px;',border:false}
	        	          
	        	    ]    
	        	}],
			buttons:[
				{
					text : '查询',
					handler : function(){
						query(true);
					}
				},
				{
					text : '返回',
					handler : function(){
						query(false);
					}
				}
			]
	      });

		var recordGrid = new Ext.grid.GridPanel({
			applyTo : 'grid-div',
			tbar : toolbar,
			frame:true,
			loadMask: true,
			//plugins: filters,
			autoScroll: true,
			autoWidth:true,
			//width: 960,
			store: store,
			viewConfig : {
				autoFill : true
			},
			sm : cb,
			columns: [//配置表格列
				new Ext.grid.RowNumberer({
					header : '行号',
					width : 40
				}),//表格行号组件
				cb,
				{header: "编号", width: 30, dataIndex: 'id', sortable: true},
				{header: "同步状态", width: 30, dataIndex: 'synchronized_tag', sortable: true},
				{header: "结果词", width: 60, dataIndex: 'keyword', sortable: true},
				<%if(UmisAction.UMIS_HINT_USE_NEW_SYNC){%>
				{header: "条件词", width: 60, dataIndex: 'condword', sortable: true},
				<%}%>
				{header: "匹配类别", width: 40, dataIndex: 'type', renderer: typeRenderer, sortable: true},
				{header: "提交者", width: 50, dataIndex: 'sub_user', sortable: true},
				
				<%if(UmisAction.UMIS_HINT_USE_NEW_SYNC){%>
				{header: "Hint限制时间", width: 50, dataIndex: 'hint_validate_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s'), sortable: true},
				{header: "生效日期", width: 50, dataIndex: 'hint_valid_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s'), sortable: true},
				{header: "失效日期", width: 50, dataIndex: 'hint_invalid_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s'), sortable: true},
				{header: "提交时间", width: 50, dataIndex: 'sub_date', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s'), sortable: true},
				{header: "快速同步状态", width: 75, dataIndex: 'sync_status',sortable: true,renderer:function(value,cellmeta,record){                  
                    if(value==1){cellmeta.attr="style=background-color:red";return "新增";}
                    if(value==2){cellmeta.attr="style=background-color:yellow";return "待同步";}
                    if(value==3){
                        var sync_modify_time = record.data['sync_modify_time'];
                        cellmeta.attr="style=background-color:yellow";
                        return "同步中";}
                    if(value==4){cellmeta.attr="style=background-color:green";return "同步成功";}
                    if(value==5){cellmeta.attr="style=background-color:red";return "同步失败";}
                    
                    var sync_modify_time = record.data['sync_modify_time'];
                    //return Ext.util.Format.date(sync_modify_time, 'Y-m-d H:i:s');
                    cellmeta.attr="style=background-color:red";
                    return "数据错误";}},
                {header: "同步信息", width: 75, dataIndex: 'sync_message'},
                {header: "同步修改时间", width: 75, dataIndex: 'sync_modify_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')}
                <%}else{%>
                {header: "Hint限制时间", width: 50, dataIndex: 'hint_validate_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s'), sortable: true}
                <%
                }%>
			],
	        // paging bar on the bottom
	        bbar: pagingBar
			
		});
		// trigger the data store load
    	store.load({params:{start:0, limit:18}});
		

    	var inputForm = new Ext.FormPanel({
			labelSeparator : ":",
			frame:true,
			border:false,
			autoHeight: true,
			id : 'inputform',
			items : [
				{
					xtype:'textarea',
					width : 300,
					height : 150,
					cls:'tabclass',
					id:'keyword',
					name : 'keyword',
					fieldLabel:'<font color=red>*</font>结果词<br><font color=red>（输入条目上限为100条，每条归一化后长度超过255为不合法）</font>',
					allowBlank : true
				},
				<%if(UmisAction.UMIS_HINT_USE_NEW_SYNC){%>
				{
                    xtype:'textarea',
                    width : 300,
                    height : 150,
                    cls:'tabclass',
                    id:'condword',
                    name : 'condword',
                    fieldLabel:'<font color=red>*</font>条件词<br><font color=red>（输入条目上限为100条，每条归一化后长度超过255为不合法）</font>',
                    allowBlank : true
                },
                <%}%>
				{
                	xtype: 'combo',
                    fieldLabel: '<font color=red>*</font>匹配方式:',
                    hiddenName: 'type',
                    store: new Ext.data.SimpleStore({
                		fields: ['value', 'text'],
                		data: [
                			[1, '精确匹配'],   
                			[2, '模糊匹配'],  
                			[3, '组合匹配'],  
                			[4, '精确匹配过滤']
                		]
                	}),
                    displayField: 'text',
                    valueField: 'value',
                    mode: 'local',
                    triggerAction: 'all',
                    value: 1         
                },{
                    xtype:'textfield',
                    allowBlank : false,
                    id : 'hint_validate_time_string',
                    name : 'hint_validate_time_string',
                    fieldLabel:'<font color=red>*</font>Hint限制时间<font color=red>*</font><font color=red>(仅对hint生效)</font>',
                    cls:'Wdate',
                    value: "1970-01-01 07:00:00"
                },
                <%if(UmisAction.UMIS_HINT_USE_NEW_SYNC){%>
                {
                    xtype:'textfield',
                    allowBlank : false,
                    id : 'hint_valid_time_string',
                    name : 'hint_valid_time_string',
                    fieldLabel:'<font color=red>*</font>生效日期<font color=red>*</font>',
                    cls:'Wdate',
                    value: "<%=currentTime%>"
                },
                {
                    xtype:'textfield',
                    allowBlank : false,
                    id : 'hint_invalid_time_string',
                    name : 'hint_invalid_time_string',
                    fieldLabel:'<font color=red>*</font>失效日期<font color=red>*</font>',
                    cls:'Wdate',
                    value: '2050-01-01 07:00:00'
                },
                <%}%>
             	{
                     //xtype:'combo',
                    xtype:'hidden',
                     fieldLabel:'<font color=red>*</font>同时限制sugg',
                     id:"suggType",
                     name : 'ensugg',
                     allowBlank : false,
                     blankText : '限制级别为必填项',
                     hiddenName : 'ensugg',
                     store: Ext.exampledata.encombox_list,
                     typeAhead: true,
                     forceSelection: true,
                     triggerAction: 'all',
                     emptyText:'请选择其中一种...',
                     selectOnFocus:true,
                     value: '0'
			    }                                              
                ,
                
                {
					xtype:'hidden',
					name : 'id'
				}
			],
			buttons:[
				{
					text : '提交',
					handler : submitForm
				},
				{
					text : '关闭',
					handler : function(){
						win.hide();
					}
				}
			]
		});


		//删除原有窗口对象
		win = Ext.getCmp('input_window');
		if(win){
			win.destroy();
		}
		//创建弹出窗口
		var win = new Ext.Window({
			id: 'input_window',
			layout:'fit',
		    width:480,
		    closeAction:'hide',
			resizable : false,
			shadow : true,
			modal :true,
		    closable:true,
		    bodyStyle:'padding:5 5 5 5',
		    animCollapse:true,
			items:[inputForm]
		});
		win.width = 480;
		//win.height = 350;

		//显示新建域名表记录窗口
		function showAdd(){
			inputForm.form.reset();
			inputForm.isAdd = true;
			win.setTitle("新增记录信息");
			win.show();
			bindingKeyDown();
			bindingPicker();
		}
		//显示修改域名表记录窗口
		function showModify(){
			var recordList = getCheckedIdList();
			var num = recordList.length;
			if(num > 1){
				Ext.MessageBox.alert("提示","每次只能修改一条记录信息。");
			}else if(num == 1){
				inputForm.isAdd = false;
				win.setTitle("修改记录信息");
				win.show();
				bindingKeyDown();
				bindingPicker();
				var recordId = recordList[0];
				loadForm(recordId);
			}
		}
		function reload(){
            store.load({params:{start:0, limit:pageSize}});
        }
        function doSync(){
            new_synchronize(reload);
        }
        function doCancel(){
            cancel_synchronize(reload);
        }
		function bindingPicker(){
		    var wPicker = function(){
                WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm:ss'});
            }
		    var hint_validate_time_string = document.getElementById("hint_validate_time_string");
		    hint_validate_time_string.onclick = wPicker;
		    <%if(UmisAction.UMIS_HINT_USE_NEW_SYNC){%>
		    var hint_invalid_time_string = document.getElementById("hint_invalid_time_string");
		    hint_invalid_time_string.onclick = wPicker;
            var hint_valid_time_string = document.getElementById("hint_valid_time_string");
            hint_valid_time_string.onclick = wPicker;
            <%}%>
		}
    	  
		function bindingKeyDown(){	    
		    Ext.each(Ext.query(".tabclass"),function(item){
		        item.onkeydown=function(evt){
		            var keycode = getKeycode(evt);
	                if(keycode==9){
	                    stopEvent(evt);
	                    insertAtCursor(item,'\t');
	                }
		        }
		    });
		}
		//加载表单数据
		function loadForm(recordId){
			inputForm.form.load({
				waitMsg : '正在加载数据请稍后',//提示信息
				waitTitle : '提示',//标题
				url : 'hint_webpage.do?method=getRecordById',//请求的url地址
				params : {recordId : recordId},
				method:'GET',//请求方式
				success:function(form,action){//加载成功的处理函数
				},
				failure:function(form,action){//加载失败的处理函数
					Ext.Msg.alert('提示','数据加载失败');
				}
			});
		}
		//显示删除域名表记录对话框
		function showDelete(){
			var recordIdList = getCheckedIdList();
			var num = recordIdList.length;
			if(num == 0){
				return;
			}
			Ext.MessageBox.confirm("提示","您确定要删除所选记录吗？",function(btnId){
				if(btnId == 'yes')
					deleteRecord(recordIdList);
			})
		}
		//删除域名表记录
		function deleteRecord(recordIdList){
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在删除网页hint记录信息请稍后......'
			});
			Ext.Ajax.request({
				url : 'hint_webpage.do?method=deleteRecord',
				params : {recordIdList : recordIdList.toString()},
				method : 'POST',
				success : function(response,options){
					msgTip.hide();
					var result = Ext.util.JSON.decode(response.responseText);
					if(result.success){
						//服务器端数据成功删除后，同步删除客户端列表中的数据
						store.load({params:{start:0, limit:18}});
						Ext.Msg.alert('提示','删除网页hint记录信息成功。');
					}else{
						Ext.Msg.alert('提示','该网页hint记录已包含'+result.num+'本书籍信息不能删除！');
					}
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','删除网页hint记录请求失败！');
				}
			});
		}
		function checkLength(id){
		    var word=document.getElementById(id).value;
		    word=word.replace(/(^\s*)|(\s*$)/g, "");
		    if(word.length==0)return false;
		    return true;
		}
		
		function checkEnsugg(){
		    var suggType = document.getElementById("suggType").value;
		    if(suggType=="条件词封禁"){
		        if(!checkLength("condword"))return 1;
		    }
		    if(suggType=="结果词封禁"){
		        if(!checkLength("keyword"))return 2;
		    }
		    if(suggType=="两者都屏蔽"){
		        
                if(!checkLength("condword")||!checkLength("keyword"))return 3;
		    }
		    return 0;
		}
		//提交表单数据
		function submitForm(){
			//判断当前执行的提交操作，isAdd为true表示执行域名表记录新增操作，false表示执行域名表记录修改操作
			if( inputForm.form.isValid() ){
			    var check = 0;
			    check = checkEnsugg();
			    if(check==1){
			        Ext.Msg.alert('提示','条件词为空，不能同时封禁sugg的条件词');
			    }
			    else if(check==2){
			        Ext.Msg.alert('提示','结果词为空，不能同时封禁sugg的结果词');
			    }else if(check==3){
			        Ext.Msg.alert('提示','条件词或者结果词为空，不能进行两者同时封禁');
			    }else{
    				if(inputForm.isAdd){
    					//新增域名表记录信息
    					inputForm.form.submit({
    						clientValidation:true,//进行客户端验证
    						waitMsg : '正在提交数据请稍后',//提示信息
    						waitTitle : '提示',//标题
    						url : 'hint_webpage.do?method=addRecord',//请求的url地址
    						method:'POST',//请求方式
    						success:function(form,action){//加载成功的处理函数
    							win.hide();
    							var failcause = action.result.cause;
    							Ext.MessageBox.show({
    					           title: '提示',
    					           msg: '完成新增网页hint表记录操作。<br><br><br>' + failcause , 
    					           buttons: Ext.MessageBox.OK,
    					           icon: Ext.MessageBox.INFO
    					        });
    							store.load({params:{start:0, limit:18}});
    						},
    						failure:function(form,action){//加载失败的处理函数
    							win.hide();
    							var failcause = action.result.cause;
    							Ext.MessageBox.show({
    					           title: '提示',
    					           msg: '新增网页hint表记录失败。原因是:<br>'+failcause,
    					           buttons: Ext.MessageBox.OK,
    					           icon: Ext.MessageBox.ERROR
    					        });
    						}
    					});
    				}else{
    					//修改域名表记录信息
    					inputForm.form.submit({
    						clientValidation:true,//进行客户端验证
    						waitMsg : '正在提交数据请稍后',//提示信息
    						waitTitle : '提示',//标题
    						url : 'hint_webpage.do?method=modifyRecord',//请求的url地址
    						method:'POST',//请求方式
    						success:function(form,action){//加载成功的处理函数
    							win.hide();
    							Ext.Msg.alert('提示','修改网页hint表记录成功');
    							store.load({params:{start:0, limit:18}});
    						},
    						failure:function(form,action){//加载失败的处理函数
    							var failcause = action.result.cause;
    							win.hide();
    							Ext.MessageBox.show({
    					           title: '提示',
    					           msg: '修改网页hint表记录失败。原因是:<br>'+failcause,
    					           buttons: Ext.MessageBox.OK,
    					           icon: Ext.MessageBox.ERROR
    					        });
    						}
    					});
    				}
			    }
			}//if( inputForm.form.isValid() )
		}
		//取得所选域名记录信息
		function getCheckedIdList(){
			var recs = recordGrid.getSelectionModel().getSelections();
			var list = [];
			if(recs.length == 0){
				Ext.MessageBox.alert('提示','请选择要进行操作的记录！');
			}else{
				for(var i = 0 ; i < recs.length ; i++){
					var rec = recs[i];
					list.push(rec.get('id'));
				}
			}
			return list;
		}	   
	    //线上同步词表
        function synchronize(){
            var msgTip = Ext.MessageBox.show({
                title:'提示',
                width : 250,
                msg:'正在向线上发送网页hint同步信号，请稍候......'
            });
            Ext.Ajax.request({
                url : 'hint_webpage.do?method=deploy',
                params : {deploytype : 'hint'},
                method : 'POST',
                success : function(response,options){
                    msgTip.hide();
                    Ext.Msg.alert('提示','词表线上同步中...');
                    store.load({params:{start:0, limit:18}});
                },
                failure : function(response,options){
                    msgTip.hide();
                    Ext.Msg.alert('提示','词表线上同步失败！');
                }
            });
        }
		//导出Excel
		function exportExcel(){
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在导出网页hint记录信息请稍候（上限1w条）......'
			});
			Ext.Ajax.request({
				url : 'hint_webpage.do?method=exportRecord',
				params : {storeUrl : Ext.util.JSON.encode(exportConditionUrl) },
				method : 'POST',
				success : function(response,options){
					msgTip.hide();
					window.location = '<%=request.getContextPath()%>/exportExcel/blacklist_hint.xls';
					var result = Ext.util.JSON.decode(response.responseText);
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','导出网页hint记录请求失败！');
				}
			});
			
		}
		//将 是否封禁首页和是否留首封站 的代码解析成 文本
		function booleantag(val){
	        if(val == 1){
	            return '是';
	        }else if(val == 0){
	            return '否';
	        }else
		        return '';
    	}
		//开始查询代码
		function query(tag){
			//新增域名表记录信息
			var query_keyword ;
			if(tag)
				query_keyword = document.getElementById("query_keyword").value;
			else{
				query_keyword = '';
				document.getElementById("query_keyword").value='';
			}
			var query_condword ;
            if(tag)
                query_condword = document.getElementById("query_condword").value;
            else{
                query_condword = '';
                document.getElementById("query_condword").value='';
            }
			var query_keyword_matchType;
			if(document.getElementsByName("query_keyword_matchType")[0].checked)
			    query_keyword_matchType = 1;
			else
			    query_keyword_matchType = 0;
			var query_condword_matchType;
            if(document.getElementsByName("query_condword_matchType")[0].checked)
                query_condword_matchType = 1;
            else
                query_condword_matchType = 0;
			var query_sub_user = document.getElementById("query_sub_user").value;
			var query_type;
			if(document.getElementsByName("query_type")[0].checked)
				query_type = -100;
			else if(document.getElementsByName("query_type")[1].checked)
				query_type = 2;
			else if(document.getElementsByName("query_type")[2].checked)
				query_type = 1;
			else if(document.getElementsByName("query_type")[3].checked)
				query_type = 3;
			else if(document.getElementsByName("query_type")[4].checked)
				query_type = 4;
			else
				query_type = 1;
			
			var url = "hint_webpage.do?method=getRecordList&query_keyword="+escape(query_keyword)+"&query_condword="+escape(query_condword)+"&query_condword_matchType="+query_condword_matchType+"&query_keyword_matchType="+query_keyword_matchType+ "&query_sub_user=" + escape(query_sub_user) + "&query_type=" + query_type;
			//导出条件
			exportConditionUrl = "hint_webpage.do?method=getRecordList&query_keyword="+escape(query_keyword)+"&query_condword="+escape(query_condword)+"&query_condword_matchType="+query_condword_matchType+"&query_keyword_matchType="+query_keyword_matchType+ "&query_sub_user=" + escape(query_sub_user) + "&query_type=" + query_type;
			
			store.proxy.conn.url = url;
			store.load({params:{start:0, limit:18}});
		}
		
	    dr.render('dr');

	  	
	});
</script>
<body>
<div id="dr" style="width:100%;height:35%;"></div>
<div id="progress-div" style="width:100%;height:4%;display:none"></div>
<div id='grid-div' style="width:100%; height:61%;"></div>
</body>
</html>