<%@ page language="java" contentType="text/html; charset=GBK"
    pageEncoding="GBK"%>
<%@ page import="
java.util.ArrayList,
java.util.HashMap,
com.sohu.frontweb.ubs.service.BlacklistService,
com.sohu.frontweb.ubs.data.*;

"%>  
 
<% 
	String table = request.getParameter("table");

	BlackTable thisTable = BlacklistService.TABLE_MAP.get(table);
	ArrayList<BlackColumn> columnList = thisTable.getColumnList();
%>    
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=GBK">
	<title>通用黑名单列表</title>
</head>
<script type="text/javascript">
<%
	String user = (String)session.getAttribute("user");
	String[] userArr = null;
	if(user!=null)
		userArr = user.split("@");
		
%>
	var user = "<%=userArr[0]%>";

	var PageSize  = 18;

	Ext.namespace('Ext.exampledata');
	Ext.onReady(function(){
		
		//创建新增或单独修改表记录信息的form表单
		Ext.QuickTips.init();
		Ext.form.Field.prototype.msgTarget = 'side';//统一指定错误信息提示方式
		//定义数据集对象
		var store = new Ext.data.Store({//配置分组数据集
			reader: new Ext.data.XmlReader({
				totalRecords: "total",
				record: "item",
				id: "id"
			},
			Ext.data.Record.create([
				{name: 'id'},
				<%
				for(BlackColumn bc : columnList){
					out.println("{name: '"+bc.getName()+"'},");
				}
				%>
				{name: 'url'},
				{name: 'weight'},
				{name: 'start_time', type: 'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'end_time', type: 'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'user'},
				{name: 'create_time', type: 'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'modify_time', type: 'date', dateFormat: 'Y-m-d H:i:s'}
				
			])
			),
			proxy : new Ext.data.HttpProxy({
				url : 'flow.do?method=getDataList&table=<%=table%>'
			}),
			sortInfo: {field: 'id', direction: 'DESC'},
	  		remoteSort: true
		})
		
		<%
		String id = request.getParameter("id");
		if(id!= null &&!id.isEmpty())			
			out.println("store.proxy.conn.url = 'flow.do?method=getDataList&table="+table+"&id="+id+"';");
		%>
		
    	store.load({params:{start:0, limit:PageSize}});


		<%//根据权限信息显示工具栏
		StringBuffer toolbar_str = new StringBuffer();
		
		/*
		if(!thisTable.getType().equals("apply")){
			if( ( (Integer)session.getAttribute(table+"_add") )==1)
	    		toolbar_str.append("{text : '新增',iconCls:'add',handler : showAdd},");
	    	if( ( (Integer)session.getAttribute(table+"_add") )==1)
	    		toolbar_str.append("{text : '批量新增',iconCls:'batch-add',handler : showBatchAdd},");
	    	if(  ( (Integer)session.getAttribute(table+"_modify") )==1)
	    		toolbar_str.append("{text : '修改',iconCls:'option',handler : showModify},");
	    	if(  ( (Integer)session.getAttribute(table+"_delete") )==1)
	    		toolbar_str.append("{text : '删除',iconCls:'remove',handler : showDelete},");
	    	
	    	if(!thisTable.getSyncShell().isEmpty()&&(( (Integer)session.getAttribute(table+"_add") )==1))
	    		toolbar_str.append("{text : '数据上线',iconCls:'batch-remove',handler : synchronize},");		
		}
		else{
			toolbar_str.append("{text : '新增',iconCls:'add',handler : showAdd},");
	    	if(  ( (Integer)session.getAttribute(table+"_check") )==1)
	    		toolbar_str.append("{text : '审核',iconCls:'option',handler : showModify},");
	    	else
	    		toolbar_str.append("{text : '查看',iconCls:'option',handler : showModify},");
	    	
	    	if(  ( (Integer)session.getAttribute(table+"_check") )==1)
	    		toolbar_str.append("{text : '删除',iconCls:'remove',handler : showDelete},");
	    
		}
	    */
	    
	    toolbar_str.append("{text : '接口说明',iconCls:'option',handler : showInterface},");
		toolbar_str.append("{text : '查看分布',iconCls:'option',handler : showDistribution},");

	    if(toolbar_str.toString().length()>0)
	    	toolbar_str.deleteCharAt(toolbar_str.length()-1);
	    %>
		//创建工具栏组件
		var toolbar = new Ext.Toolbar([
		    <%=toolbar_str.toString()%>
		]);
		
	
    	//创建分页工具栏
    	var pagingBar = new Ext.PagingToolbar({
    		pageSize: PageSize,
	        store: store,
	        displayInfo: true,
	        displayMsg: '显示 {0} - {1} , 共 {2} 条记录',
	        emptyMsg: "没有任何记录",
	        items:['-']
    	});
		//创建Grid表格组件
		var cb = new Ext.grid.CheckboxSelectionModel();

/*****************************/
				<%
				
				StringBuffer columnSb =  new StringBuffer();
				StringBuffer storeSb =  new StringBuffer();
				StringBuffer mapSb =  new StringBuffer();
				StringBuffer renderSb = new StringBuffer();
				
				StringBuffer timePickerSb = new StringBuffer();
				
				for(BlackColumn bc : columnList){
					if(bc.getTypeName().equals("text")||bc.getTypeName().equals("number")){
						columnSb.append("{\n");
						if(bc.isHidden())
							columnSb.append("xtype:'hidden',\n");
						else
							columnSb.append("xtype:'textfield',\n");
						//if(bc.isReadOnly()||(bc.getPrivilage().equals("check")&&((Integer)session.getAttribute(table+"_check")!=1)))
						if(bc.isReadOnly())
							columnSb.append("readOnly:true,\n");
						
						//权限属性
						columnSb.append("privilege:'"+bc.getPrivilage()+"',\n");						
						columnSb.append("width : "+ bc.getSize() +",\n");
						//columnSb.append("allowBlank : false,\n");
						//columnSb.append("blankText : '"+ bc.getCnName() +"不能为空',\n");
						columnSb.append("name : '"+ bc.getName() +"',\n");
						columnSb.append("id : '"+ bc.getName() +"',\n");
						if(thisTable.getType().equals("apply")&&bc.getName().equals("in_charge"))
							columnSb.append("value : user,\n");
						else
							columnSb.append("value : '"+ bc.getDefaultValue() +"',\n");
						
						columnSb.append("fieldLabel : '"+ bc.getCnName() +"'\n");
						columnSb.append("},\n");
					//columnSb.append("id : '"+ bc.getName() +"',\n");
									
					}else if(bc.getTypeName().equals("textarea")){
						columnSb.append("{\n");
						if(bc.isHidden())
							columnSb.append("xtype:'hidden',\n");
						else
							columnSb.append("xtype:'textarea',\n");
					
						if(bc.isReadOnly())
							columnSb.append("readOnly:true,\n");
						
						//权限属性
						columnSb.append("privilege:'"+bc.getPrivilage()+"',\n");						
						columnSb.append("width : "+ bc.getSize() +",\n");
						columnSb.append("height : "+ bc.getHeight() +",\n");
						//columnSb.append("allowBlank : false,\n");
						//columnSb.append("blankText : '"+ bc.getCnName() +"不能为空',\n");
						columnSb.append("name : '"+ bc.getName() +"',\n");
						columnSb.append("id : '"+ bc.getName() +"',\n");
						if(thisTable.getType().equals("apply")&&bc.getName().equals("in_charge"))
							columnSb.append("value : user,\n");
						else
							columnSb.append("value : '"+ bc.getDefaultValue() +"',\n");
						
						columnSb.append("fieldLabel : '"+ bc.getCnName() +"'\n");
						columnSb.append("},\n");					
					
					}else if(bc.getTypeName().equals("datetime")){
						
						columnSb.append("{\n");
						if(bc.isHidden())
							columnSb.append("xtype:'hidden',\n");
						else
							columnSb.append("xtype:'textfield',\n");
						//if(bc.isReadOnly()||(bc.getPrivilage().equals("check")&&((Integer)session.getAttribute(table+"_check")!=1)))
						if(bc.isReadOnly())
							columnSb.append("readOnly:true,\n");
						
						//权限属性
						columnSb.append("privilege:'"+bc.getPrivilage()+"',\n");	
												
						columnSb.append("width : "+ bc.getSize() +",\n");
						//columnSb.append("allowBlank : false,\n");
						//columnSb.append("blankText : '"+ bc.getCnName() +"不能为空',\n");
						columnSb.append("name : '"+ bc.getName() +"',\n");
						columnSb.append("id : '"+ bc.getName() +"',\n");
						columnSb.append("value : '"+ bc.getDefaultValue() +"',\n");
						columnSb.append("fieldLabel : '"+ bc.getCnName() +"',\n");
						columnSb.append("cls:'Wdate'\n");
						columnSb.append("},\n");
						
						if(bc.getDefaultValue().isEmpty())
							timePickerSb.append("Ext.getCmp('"+ bc.getName() +"').setValue(getTimeAfterNow(0));\n");
				
						timePickerSb.append("document.getElementById('"+ bc.getName() +"').onclick = function(){WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm:ss'});};\n");
						
					}else if(bc.getTypeName().equals("select")){
						storeSb.append("Ext.exampledata.exampledata_"+ bc.getName() +" = [\n");
						mapSb.append("var "+bc.getName()+"Map = {\n");
						
						int i = 0;
						for(BlackColumnItem bi : bc.getItems()){
							i++;
							if(i==1){
								storeSb.append("['"+ bi.getValue() +"', '"+ bi.getText() +"', '']\n");
								mapSb.append("'"+ bi.getValue() +"':'"+ bi.getText() +"'\n");
							}else{
								storeSb.append(",['"+ bi.getValue() +"', '"+ bi.getText() +"', '']\n");
								mapSb.append(",'"+ bi.getValue() +"':'"+ bi.getText() +"'\n");
						
							}
						}
						storeSb.append("];\n");	
						mapSb.append("};");
						
						
						columnSb.append("{\n");
						if(bc.isHidden())
							columnSb.append("xtype:'hidden',\n");
						else						
							columnSb.append("xtype:'combo',\n");
						//if(bc.isReadOnly()||(bc.getPrivilage().equals("check")&&((Integer)session.getAttribute(table+"_check")!=1)))
						if(bc.isReadOnly())
							columnSb.append("disabled:true,\n");
							
						columnSb.append("privilege:'"+bc.getPrivilage()+"',\n");
							
						columnSb.append("fieldLabel:'"+bc.getCnName()+"',\n");
						columnSb.append("name : '"+ bc.getName() +"',\n");
						columnSb.append("id : '"+ bc.getName() +"_select',\n");
						columnSb.append("allowBlank : false,\n");
						columnSb.append("blankText : '"+bc.getCnName()+"为必填项',\n");
						columnSb.append("hiddenName : '"+ bc.getName() +"',\n");
						columnSb.append("store: Ext.exampledata.exampledata_"+ bc.getName() +",\n");
						columnSb.append("typeAhead: true,\n");	
						columnSb.append("forceSelection: true,\n");	
						columnSb.append("triggerAction: 'all',\n");	
						columnSb.append("emptyText:'请选择其中一种...',\n");	
						columnSb.append("selectOnFocus:true,\n");	
						columnSb.append("value: '"+ bc.getDefaultValue() +"'\n");	
						columnSb.append("},\n");
													
											
					}else if(bc.getTypeName().equals("radio")){
						int i = 0;
						
						mapSb.append("var "+bc.getName()+"Map = {");
						for(BlackColumnItem bi : bc.getItems()){
							i++;
							columnSb.append("{\n");
							if(bc.isHidden())
								columnSb.append("xtype:'hidden',\n");													
							else
								columnSb.append("xtype: 'radio',\n");
														
							//if(bc.isReadOnly()||(bc.getPrivilage().equals("check")&&((Integer)session.getAttribute(table+"_check")!=1)))
							if(bc.isReadOnly())
								columnSb.append("disabled:true,\n");							
							columnSb.append("privilege:'"+bc.getPrivilage()+"',\n");
								
							if(i==1){
								columnSb.append("fieldLabel: '"+bc.getCnName()+":',\n");
								mapSb.append("'"+ bi.getValue() +"':'"+ bi.getText() +"'\n");
							}else{
								columnSb.append("fieldLabel: '',\n");
								mapSb.append(",'"+ bi.getValue() +"':'"+ bi.getText() +"'\n");
							}
								
							if(bi.getValue().equals(bc.getDefaultValue()))
								columnSb.append("checked: true,\n");
							else
								columnSb.append("checked: false,\n");
							
							columnSb.append("width: '"+ bc.getSize() +"',\n");	
							columnSb.append("labelSeparator: '',\n");
							columnSb.append("boxLabel: '"+ bi.getText() +"',\n");
							columnSb.append("id: '"+ bc.getName()+ i +"',\n");								
							columnSb.append("name: '"+ bc.getName() +"',\n");
							columnSb.append("inputValue: '"+ bi.getValue() +"'\n");
							columnSb.append("},\n");					
						}
						mapSb.append("};");
					}
					
					if(bc.getTypeName().equals("select") || bc.getTypeName().equals("radio")){
						renderSb.append("function "+bc.getName()+"Render(val){\n");
						renderSb.append("if("+bc.getName()+"Map[val])\n");
						renderSb.append("	return "+bc.getName()+"Map[val];\n");
						renderSb.append("else");
						renderSb.append("	return val;\n");
						renderSb.append("}\n");
					
					}
				}
				
		out.println(mapSb.toString());		
		out.println(storeSb.toString());	
		out.println(renderSb.toString());	
		
		
		
		//搜索布局
		StringBuffer searchBuf = new StringBuffer();
		ArrayList<BlackSearch> searchList = thisTable.getSearchList();
		HashMap<String,BlackColumn> bcMap = thisTable.getColumnMap();
		
		for(BlackSearch bs : searchList){
			String columnName = bs.getColumnName();
			BlackColumn thisColumn = bcMap.get(columnName);

			if(thisColumn==null)
				continue;
			
			if(thisColumn.getTypeName().equals("text")||thisColumn.getTypeName().equals("number")){
				searchBuf.append("{\n");
				searchBuf.append("xtype:'textfield',\n");
				searchBuf.append("width : "+thisColumn.getSize()+",\n");
				searchBuf.append("id : 'query_"+ thisColumn.getName() +"',\n");
				searchBuf.append("name : 'query_"+ thisColumn.getName() +"',\n");
				searchBuf.append("fieldLabel:'"+ thisColumn.getCnName() +"'\n");
				searchBuf.append("},\n");
				
			}else if(thisColumn.getTypeName().equals("select")){				
				
				searchBuf.append("{\n");
				searchBuf.append("xtype:'combo',\n");
				searchBuf.append("fieldLabel:'"+thisColumn.getCnName()+"',\n");
				searchBuf.append("name : 'query_"+ thisColumn.getName() +"',\n");
				searchBuf.append("id : 'query_"+ thisColumn.getName() +"',\n");
				searchBuf.append("allowBlank : false,\n");
				searchBuf.append("blankText : '"+thisColumn.getCnName()+"为必填项',\n");
				searchBuf.append("hiddenName : '"+ thisColumn.getName() +"',\n");
				searchBuf.append("store: Ext.exampledata.exampledata_"+ thisColumn.getName() +",\n");
				searchBuf.append("typeAhead: true,\n");	
				searchBuf.append("forceSelection: true,\n");	
				searchBuf.append("triggerAction: 'all',\n");	
				searchBuf.append("emptyText:'请选择其中一种...',\n");	
				searchBuf.append("selectOnFocus:true,\n");	
				searchBuf.append("value: '"+ thisColumn.getDefaultValue() +"'\n");	
				searchBuf.append("},\n");
																								
			}else if(thisColumn.getTypeName().equals("radio")){
				int i = 0;
				
				for(BlackColumnItem bi : thisColumn.getItems()){
					i++;
					searchBuf.append("{\n");
					searchBuf.append("xtype: 'radio',\n");
					if(i==1){
						searchBuf.append("fieldLabel: '"+thisColumn.getCnName()+":',\n");
					}else{
						searchBuf.append("fieldLabel: '',\n");
					}
						
					if(bi.getValue().equals(thisColumn.getDefaultValue()))
						searchBuf.append("checked: true,\n");
					else
						searchBuf.append("checked: false,\n");
						
					searchBuf.append("width: '"+thisColumn.getSize()+"',\n");	
					searchBuf.append("labelSeparator: '',\n");
					searchBuf.append("boxLabel: '"+ bi.getText() +"',\n");
					searchBuf.append("id: 'query_"+ thisColumn.getName()+ i +"',\n");								
					searchBuf.append("name: 'query_"+ thisColumn.getName() +"',\n");
					searchBuf.append("inputValue: '"+ bi.getValue() +"'\n");
					searchBuf.append("},\n");					
				}
			}
			
		}
		/*
		if(thisTable.isSelfConfig() && searchBuf.length()>0){
		
			
			searchBuf.append("{\n");
			searchBuf.append("xtype:'hidden',\n");
			searchBuf.append("id : 'query_for_end',\n");
			searchBuf.append("name : 'query_for_end',\n");
			searchBuf.append("}\n");
			
			searchBuf.deleteCharAt(searchBuf.length()-1);
		}*/
		
		%>
/*****************************/		

var today=new Date();
var yestoday = new Date(today.getTime() - 24*60*60*1000); 
		//开始查询表单部分
		var dr = new Ext.FormPanel({
	    	labelWidth: 125,
	        frame: true,
	  	  	bodyStyle:'padding:5px 5px 0',
	  	 	autoScroll: true,
	  	  	autoWidth: true,
	  	  	<%
	  	  	if(searchBuf.length()==0)
	  	  		out.println("hidden:true,");
	  	  	%>	        
	        defaults: {width: 175},
	      	//增加表单键盘事件
	        keys:[
	         {
	             key: [10,13],
	             fn:query
	         } ],
	        items: [
	        <%
	        
	        out.println(searchBuf.toString());  
	        %>
	        	{
	        	    layout:'column',
	        	    width : 620,
	        	    border:false,
	        	    //hidden:<%=thisTable.isSelfConfig()?"true":"false"%>,
	        	    items:[
	        	        {
	        	            columnWidth:.5,
	        	            layout: 'form',
	        	            border:false,
	        	            items: [{
	        	            	xtype:'textfield',
	    						id : 'query_start_time',
	    						name : 'query_start_time',
	    						fieldLabel:'查询日期',
	    						cls:'Wdate',
	    						value:yestoday.format('Y-m-d')+" 00:00"
	    					
	        	            }]
	        	        },
	        	        {
	        	            columnWidth:.5,
	        	            layout: 'form',
	        	            border:false,
	        	            items: [{
	        	            	xtype:'textfield',
	    						id : 'query_end_time',
	    						name : 'query_end_time',
	    						fieldLabel:'到',
	    						cls:'Wdate',
	    						value:yestoday.format('Y-m-d')+" 24:00"
	        	            }]
	        	        }
	        	      ]
	        	}, 
	        	
	        	{
	        		xtype:'hidden',
	        		id : 'query_for_end',
	        		name : 'query_for_end'
	        	}
	        	           
            ],
			buttons:[
				{
					text : '查询',
					handler : function(){
						query(true);
					}
				},
				{
					text : '返回',
					handler : function(){
						query(false);
					}
				}
			]
	      });
/**********************************************/		
		
		var recordGrid = new Ext.grid.GridPanel({
			applyTo : 'grid-div',
			tbar : toolbar,
			frame:true,
			loadMask: true,
			autoScroll: true,
			autoWidth :true,			
			//width: 960,
			store: store,
			viewConfig : {
				autoFill : true
			},
			sm : cb,
			columns: [//配置表格列
				/*
		        new Ext.grid.RowNumberer({
					header : '行号',
					width : 40
				}),*/
				//表格行号组件
				cb,
				{header: "编号", width: 40, dataIndex: 'id', sortable: true},
				<%
				StringBuffer thisColumnSb = new StringBuffer();
				for(BlackColumn bc : columnList){
					
					//如果是申请忽略duration字段
					if(thisTable.getType().equals("apply")&&bc.getName().equals("duration"))
						continue;
					
					if(bc.getItems().size()==0)
						thisColumnSb.append("{header: '"+bc.getCnName()+"', width: "+ bc.getSize() +", dataIndex: '"+ bc.getName() +"'},");
					else 
						thisColumnSb.append("{header: '"+bc.getCnName()+"', width: "+ bc.getSize() +", dataIndex: '"+ bc.getName() +"', renderer: "+ bc.getName() +"Render},");
				}
				
				if(thisTable.isSelfConfig()){
					thisColumnSb.deleteCharAt(thisColumnSb.length()-1);
				}
				out.println(thisColumnSb.toString());
	
				if(!thisTable.isSelfConfig()){
				%>				
				{header: "生效时间", width: 60, dataIndex: 'start_time',renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')},
				{header: "失效时间", width: 60, dataIndex: 'end_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')},
				{header: "提交者", width: 80, dataIndex: 'user'},
				{header: "创建时间", width: 60, dataIndex: 'create_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')},
				{header: "更新时间", width: 60, dataIndex: 'modify_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')}
				<%}%>
			],
			
	        // paging bar on the bottom
	        bbar: pagingBar
			
		});

		//recordGrid.addListener('cellclick', cellclick);
		recordGrid.addListener('rowdblclick', cellclick);
		//function cellclick(grid, rowIndex, columnIndex, e) {
		function cellclick(grid, rowIndex,  e) {
		    var record = grid.getStore().getAt(rowIndex);   //Get the Record
		    //var fieldName = grid.getColumnModel().getDataIndex(columnIndex); //Get field name
		    var id = record.get("id");
		    //Ext.MessageBox.alert('show','当前选中的数据是'+data);
		    
		    var w=Ext.getCmp('eastContent');
			//w.collapsed=w.collapse(); /*控制关闭*/
			w.collapsed=w.expand();/*控制打开*/
			w.width=300;//w.setWidth(300);
			w.show();
			
			var url = "flow/chart.jsp?title="+ escape(record.get("title")) +"&table=<%=table%>&r="+Math.random();
			w.load({
				url:url,
				callback : function(){
					w.setTitle("【趋势图】"+record.get("title"));
				},
				scripts: true
			});			
		    
		}

		var inputForm = new Ext.FormPanel({
			name:"input",
			labelSeparator : ":",
			frame:true,
			border:false,
			autoHeight: true,
			labelWidth : 130, 
			items : [
				<%=columnSb.toString()%>		
				{
                	xtype:'textfield',
                	width : 150,
                	hidden:<%=thisTable.isSelfConfig()?"true":"false"%>,
                	<%=thisTable.isSelfConfig()?"labelStyle:\"display:none\",":""%>
                	allowBlank : false,
                	id : 'start_time_string',
					name : 'start_time_string',
					fieldLabel:'生效日期',
					cls:'Wdate',
					value: getTimeAfterNow(0)
                },{
                	xtype:'textfield',
                	width : 150,
                	hidden:<%=(thisTable.isSelfConfig()||thisTable.getType().equals("apply"))?"true":"false"%>,
                	<%=(thisTable.isSelfConfig()||thisTable.getType().equals("apply"))?"labelStyle:\"display:none\",":""%>
                	allowBlank : false,
                	id : 'end_time_string',
					name : 'end_time_string',
					fieldLabel:'失效日期',
					cls:'Wdate',
					value: '2050-01-01 00:00:00'
                },
                
                {
					xtype:'hidden',
					id: 'id',
					name : 'id'
				}
			],
			buttons:[
				{
					text : '提交',
					id : 'btn_submmit',
					handler : submitForm
				},
				{
					text : '关闭',
					handler : function(){
						win.hide();
					}
				}
			]
		});
		
		
		//批量添加
		var inputBatchForm = new Ext.FormPanel({
			name:"inputBatch",
			labelSeparator : ":",
			frame:true,
			border:false,
			autoHeight: true,
			labelWidth : 230, 
			items : [
				{
					xtype:'textarea',
					width : 460,
					height: 400,
					allowBlank : false,
					blankText : '内容不能为空',
					name : 'batchContent',
					id : 'batchContent',
					fieldLabel:
					<%
					String fieldLabel= "";
					for(BlackColumn bc : columnList){
						fieldLabel+= bc.getName()+"("+bc.getCnName()+")<br>";
					}
					%>'<%=fieldLabel%><font color=red>(中间以tab分隔,每个数据占1行，以回车分隔)</font>',
					enableKeyEvents : true,
					listeners:{
						//keypress:{fn:function(txtcomp, eventobj ){Ext.getCmp('btn_submmit').disable();}},
						change:{fn:function(txtcomp, eventobj ){
							//var anchor_var = Ext.getCmp('anchor').getValue();
							//if( anchor_var!=''){
								//后台请求二：到库中去取已有数据
								//if( keyword_var!='')
								//{
									//loadFormKeywordUrl(keyword_var,url_var);
								//}
								//后台请求一：给出此url是否已被干预过其他词的提示
								//showOtherKeywordTip(url_var);
							//}
						}}//change ends
					}
				}
			],
			buttons:[
				{
					text : '提交',
					id : 'btn_bat_sub',
					handler : submitBatForm
				},
				{
					text : '关闭',
					handler : function(){
						batchWin.hide();
					}
				}
			]
		});		
		
		
		//删除原有窗口对象
		win = Ext.getCmp('input_window');
		if(win){
			win.destroy();
		}
		var win = new Ext.Window({
			id: 'input_window',
			layout:'fit',
		    width:750,
		    closeAction:'hide',
			resizable : false,
			shadow : true,
			modal :true,
		    closable:true,
		    bodyStyle:'padding:5 5 5 5',
		    animCollapse:true,
			items:[inputForm],
			y: 100
		});
		
		batchWin = Ext.getCmp('batch_input_window');
		if(batchWin){
			batchWin.destroy();
		}		
		var batchWin = new Ext.Window({
			id: 'batch_input_window',
			layout:'fit',
		    width:750,
		    closeAction:'hide',
			resizable : false,
			shadow : true,
			modal :true,
		    closable:true,
		    bodyStyle:'padding:5 5 5 5',
		    animCollapse:true,
			items:[inputBatchForm],
			y: 100
		});		
		
		//显示新建网页前台限制词记录窗口
		function showAdd(){
		
           <%if(thisTable.getType().equals("apply")){%> 
			   inputForm.items.each(function(item,index,length){
			   		if(item.privilege != "check")
			   			item.setDisabled(false);
			   		else
			   			item.setDisabled(true);
	  		   });	
  		   <%}%>
  		   			
			inputForm.form.reset();
			inputForm.isAdd = true;
			win.setTitle("新增数据");
			win.show();
			bindingPicker();
		}
		//显示新建网页前台限制词记录窗口
		function showBatchAdd(){
			inputBatchForm.form.reset();
			batchWin.setTitle("批量新增数据");
			batchWin.add(inputBatchForm);
			batchWin.show();
			//url提示信息标签
		}		
		
		String.prototype.replaceAll  = function(s1,s2){    
			return this.replace(new RegExp(s1,"gm"),s2);    
		}
		
		//加载表单数据
		function loadForm(recordId){
			inputForm.form.load({
				waitMsg : '正在加载数据请稍后',//提示信息
				waitTitle : '提示',//标题
				url : 'ubs.do?method=getBlackById&table=<%=table%>',//请求的url地址
				params : {recordId : recordId},
				method:'GET',//请求方式
				success:function(form,action){//加载成功的处理函数
				},
				failure:function(form,action){//加载失败的处理函数
					Ext.Msg.alert('提示','数据加载失败');
				}
			});
		}		
		
		//显示修改网页前台限制词记录窗口
		function showModify(){
           
           <%if(thisTable.getType().equals("apply")){%> 
			   inputForm.items.each(function(item,index,length){
			   					//item.disabled = true;
			   			<%
			   			/*
			   			if((Integer)session.getAttribute(table+"_check")!=1)
			   					out.println("item.setDisabled(true);");
			   			else
			   					out.println("item.setDisabled(false);");
			   			*/
			   			%>
			   });	
  		   <%}%>	
		
			var recs = getCheckedIdList();
			var num = recs.length;
			if(num > 1){
				Ext.MessageBox.alert("提示","每次只能修改一条记录信息。")
			}else if(num == 1){
				inputForm.form.reset();
				inputForm.isAdd = false;
				win.setTitle("修改记录信息");
				win.show();
				bindingPicker();
				
				var recordId = recs[0]["id"];				
				loadForm(recordId);
				
				//alert(recs[0].get("in_charge"));
				if(recs[0].get("in_charge").indexOf(user)!=-1){
					var now = new Date();
					var nextDate = new Date(now.getTime() + 2*24*60*60*1000);  //前两天
					//提前两天，过时不侯
					if(nextDate > recs[0].get("end_time")&&recs[0].get("end_time") >= now)
						//alert("xx");
						Ext.getCmp("duration_select").setDisabled(false);
						Ext.getCmp("id").setDisabled(false);
				}				
				
			}

		}
		function bindingPicker(){
			//给上下线时间预置当前时间和翌日当前时间
			Ext.getCmp('start_time_string').setValue(getTimeAfterNow(0));
			
			document.getElementById('start_time_string').onclick = function(){
				WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm:ss'  });
			};
			document.getElementById('end_time_string').onclick = function(){
				WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm:ss'  });
			};
			
			<%=timePickerSb.toString()%>


		}
		//显示删除网页前台限制词记录对话框
		function showDelete(){
			var recs = getCheckedIdList();
			
			var list = [];
			if(recs.length == 0){
				Ext.MessageBox.alert('提示','请选择要进行操作的记录！');
			}else{
				for(var i = 0 ; i < recs.length ; i++){
					var rec = recs[i];
					list.push(rec.get('id'));
				}
			}			
			
			Ext.MessageBox.confirm("提示","您确定要删除所选记录吗？",function(btnId){
				if(btnId == 'yes')
					deleteRecord(list);
			});
			
		}
		//删除网页前台限制词记录
		function deleteRecord(recordIdList){
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在删除此记录信息请稍后......'
			});
			Ext.Ajax.request({
				url : 'ubs.do?method=deleteBlacklist&table=<%=table%>',
				params : {recordIdList : recordIdList.toString()},
				method : 'GET',
				success : function(response,options){
					msgTip.hide();
					var result = Ext.util.JSON.decode(response.responseText);
					if(result.success){
						//服务器端数据成功删除后，同步删除客户端列表中的数据
						store.load({params:{start:0, limit:PageSize}});
						Ext.Msg.alert('提示','删除记录成功。');
					}else{
						Ext.Msg.alert('提示','删除记录失败！');
					}
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','删除记录失败！');
				}
			});
		}

		
		//提交表单数据
		function submitForm(){
			//判断当前执行的提交操作，isAdd为true表示执行网页前台限制词记录新增操作，false表示执行网页前台限制词记录修改操作
			if( inputForm.form.isValid() ){
					if(inputForm.isAdd){
						//新增网页前台限制词记录信息
						inputForm.form.submit({
							clientValidation:true,//进行客户端验证
							waitMsg : '正在提交数据请稍后',//提示信息
							waitTitle : '提示',//标题
							url : 'ubs.do?method=addBlacklist&table=<%=table%>',//请求的url地址
							method:'POST',//请求方式
							success:function(form,action){//加载成功的处理函数
								win.hide();
								store.load({params:{start:0, limit:PageSize}});
								Ext.Msg.alert('提示','新增数据记录成功');
							},
							failure:function(form,action){//新增失败的处理函数
								var failcause = action.result.cause;
								Ext.MessageBox.show({
						           title: '提示',
						           msg: '新增数据记录失败。原因是:<br>'+failcause,
						           buttons: Ext.MessageBox.OK,
						           icon: Ext.MessageBox.ERROR
						        });
							}
						});
					}//if
					else{
						//修改网页前台限制词记录信息
						inputForm.form.submit({
							clientValidation:true,//进行客户端验证
							waitMsg : '正在提交数据请稍后',//提示信息
							waitTitle : '提示',//标题
							url : 'ubs.do?method=modifyBlacklist&table=<%=table%>',//请求的url地址
							method:'POST',//请求方式
							success:function(form,action){//加载成功的处理函数
								win.hide();
								store.load({params:{start:0, limit:PageSize}});
								Ext.Msg.alert('提示','修改数据记录成功');
							},
							failure:function(form,action){//加载失败的处理函数
								var failcause = action.result.cause;
								Ext.MessageBox.show({
						           title: '提示',
						           msg: '修改数据记录失败。原因是:<br>'+failcause,
						           buttons: Ext.MessageBox.OK,
						           icon: Ext.MessageBox.ERROR
						        });
							}
						});
					}//else
				}
		}
		
		function submitBatForm(){
			if( inputBatchForm.form.isValid() ){
						//新增网页前台限制词记录信息
						inputBatchForm.form.submit({
							clientValidation:true,//进行客户端验证
							waitMsg : '正在提交数据请稍后',//提示信息
							waitTitle : '提示',//标题
							url : 'ubs.do?method=addBatchBlacklist&table=<%=table%>',//请求的url地址
							method:'POST',//请求方式
							success:function(form,action){//加载成功的处理函数
								batchWin.hide();
								store.load({params:{start:0, limit:PageSize}});
								Ext.Msg.alert('提示','批量添加数据记录成功');
							},
							failure:function(form,action){//新增失败的处理函数
								var failcause = action.result.cause;
								Ext.MessageBox.show({
						           title: '提示',
						           msg: '新增数据记录失败。原因是:<br>'+failcause,
						           buttons: Ext.MessageBox.OK,
						           icon: Ext.MessageBox.ERROR
						        });
							}
						});		
			}		
		}
		//取得所选域名记录信息
		function getCheckedIdList(){
			var recs = recordGrid.getSelectionModel().getSelections();
			if(recs.length == 0){
				Ext.MessageBox.alert('提示','请选择要进行操作的记录！');
				return;
			}
			
			return recs;
		}
		
		function showDistribution(){
		    var w=Ext.getCmp('eastContent');
			//w.collapsed=w.collapse(); /*控制关闭*/
			w.collapsed=w.expand();/*控制打开*/
			w.width=300;//w.setWidth(300);
			w.show();
			
			var url = "flow/chart.jsp?&type=pie&table=<%=table%>&r="+Math.random();
			w.load({
				url:url,
				callback : function(){
					w.setTitle("【分布图】");
				},
				scripts: true
			});					
		}

		//线上同步词表
		function synchronize(){
			
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在向线上发送同步信号，请稍候......'
			});
			Ext.Ajax.request({
				url : 'ubs.do?method=syncBlacklist&table=<%=table%>',
				params : {deploytype : 'front'},
				method : 'POST',
				success : function(response,options){
					msgTip.hide();
					var result = Ext.util.JSON.decode(response.responseText);	
					if(result.success){
						//服务器端数据成功删除后，同步删除客户端列表中的数据
						//store.load({params:{start:0, limit:18}});
						Ext.Msg.alert('提示','词表上线成功！');
					}else{
						Ext.Msg.alert('提示','词表上线失败！'+ result.cause);
					}										
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','词表线上同步失败！');
				}
			});
		}

		
		<%
		//接口说明
		String interfaceInfo = fieldLabel;
		if(!thisTable.isSelfConfig()){
			interfaceInfo+= "create_time(创建时间)<br>modify_time(修改时间)<br>modify_time(修改时间)<br>start_time(生效时间)<br>end_time(失效时间)<br>user（用户）";;
		}
		%>
		function showInterface(){
			var info = "<table>"+
							"<tr ><td width=70><b>接口地址：</b></td><td>http://umis.op.sogou-inc.com/ubs?act=gen&table=<%=table%></td></tr>"+
							"<tr ><td><b>参数说明：</b></td><td></td></tr>"+
							"<tr ><td>act:</td><td>gen 生成文件，置于gfs上<br>文件位置:<%=thisTable.getGfsPath()%><br/>output 以文本方式显示，可通过wget获取</td></tr>"+
							"<tr ><td>table:</td><td>数据库表名</td></tr>"+
							"<tr ><td>spliter:</td><td>默认\t分隔数据字段，可以指定其他字符，值为xml时 表示以XML格式生成数据</td></tr>"+
							"<tr ><td>type:</td><td>如果生成数据指定为XML时,0 字段以item方式构建，1 字段以 attribute方式 构建</td></tr>"+
							"<tr ><td><b>数据库字段</b></td><td></td></tr>"+
							"<tr ><td></td><td><%=interfaceInfo%></td></tr>"+
					   "</table>";
		
			/*
			var info = "接口地址： <br>";
			info += "参数说明：<br/>";
			info += "&nbsp;&nbsp;act:gen 生成文件，置于gfs上，文件位置  <%=thisTable.getGfsPath()%>,output 以文本方式显示，可通过wget获取 <br/>";
			info += "&nbsp;table:数据库表名<br/>";
			info += "&nbsp;spliter: 默认\t分隔数据字段，可以指定其他字符，值为xml时 表示以XML格式生成数据<br/>";
			info += "&nbsp;type:如果生成数据指定为XML时,0 字段以item方式构建，1 字段以 attribute方式 构建<br/>";
				*/
		
			Ext.MessageBox.show({
                  title: '接口说明',
                  msg: info ,
                  width:10000,
                  buttons: Ext.MessageBox.YESNO
                  //,icon: Ext.MessageBox.QUESTION
            });		
		}

		function date2Str(d){
		    var yy = d.getFullYear(); 
		    var month = d.getMonth()+1;
		    var dd = d.getDate();

		    clock = yy + '-';
		    if (month < 10) clock += '0'; 
		    clock += month+'-'; 
		    if (dd < 10) clock += '0'; 
		    clock += dd+' '; 
		    
		    var hh = d.getHours(); 
		    var mm = d.getMinutes(); 
		    var ss = d.getTime() % 60000; 
		    ss = (ss - (ss % 1000)) / 1000; 

		    if (hh < 10) clock += '0'; 
		    clock += hh+':'; 
		    if (mm < 10) clock += '0'; 
		    clock += mm+':'; 
		    if (ss < 10) clock += '0'; 
		    clock += ss; 
		    return(clock); 
		}

		function getTimeAfterNow(after_mnt){ //当前日期后after_mnt分钟
			var clock = '';
		    var now = new Date();
		    now.setMinutes(now.getMinutes()+after_mnt);
		    
		    var yy = now.getFullYear(); 
		    var month = now.getMonth()+1;
		    var dd = now.getDate();

		    clock = yy + '-';
		    if (month < 10) clock += '0'; 
		    clock += month+'-'; 
		    if (dd < 10) clock += '0'; 
		    clock += dd+' '; 
		    
		    var hh = now.getHours(); 
		    var mm = now.getMinutes(); 
		    var ss = now.getTime() % 60000; 
		    ss = (ss - (ss % 1000)) / 1000; 

		    if (hh < 10) clock += '0'; 
		    clock += hh+':'; 
		    if (mm < 10) clock += '0'; 
		    clock += mm+':'; 
		    if (ss < 10) clock += '0'; 
		    clock += ss; 
		    return(clock); 
		}
		
		var escapespecial={"¤":"%A1%E8","§":"%A1%EC","¨":"%A1%A7","°":"%A1%E3","±":"%A1%C0","・":"%A1%A4","×":"%A1%C1","à":"%A8%A4","á":"%A8%A2","è":"%A8%A8","é":"%A8%A6","ê":"%A8%BA","ì":"%A8%AC","í":"%A8%AA","ò":"%A8%B0","ó":"%A8%AE","÷":"%A1%C2","ù":"%A8%B4","ú":"%A8%B2","ü":"%A8%B9","+":"%2B"};
		function rescape(s) {
	        var r = ""
	        if (typeof(s) == "undefined")
	                return r
	        for (var i=0;i<s.length; i++) {
	                var c = s.charAt(i);
	                if( typeof(escapespecial[c]) != "undefined")
	                        r=r+escapespecial[c];
	                else
	                        r=r+escape(c);
	        }
	        return r;
		}
		
		function toDateStr(date){
			return date.replaceAll("-","").replaceAll(":","").replaceAll(" ","");
		}
			
		//开始查询代码
		function query(tag){
			
			var url = "flow.do?method=getDataList&table=<%=table%>"; 
			<%
				
				for(BlackSearch bs : searchList){
					String seName = bs.getColumnName();
					BlackColumn bc = bcMap.get(seName);	
					
					//url += "+\"&"+bs.getColumnName()+"=\"+encodeURIComponent(sValue)";
					if(bc.getTypeName().equals("radio")){
						
					%>
						var rValue="";
						for(var i=1;i<=<%=bc.getItems().size()%>;i++){
							 if(Ext.getCmp("query_<%=seName%>"+i).checked){
								rValue =  document.getElementById("query_<%=seName%>"+i).value;
							 	break;
							 }	
						}
						if(rValue!="")
							url += "&<%=bs.getColumnName()%>="+rValue;
					<%

					}else{
					%>
					url += "&<%=bs.getColumnName()%>=" + encodeURIComponent(Ext.getCmp("query_<%=seName%>").getValue());
					<%
					}
				}
			%>
		
			var query_start_time = toDateStr(document.getElementById("query_start_time").value);
			var query_end_time = toDateStr(document.getElementById("query_end_time").value);		
		
			url += "&start_time=" + query_start_time + "&end_time=" + query_end_time;
			
			if(!tag)
				url = "flow.do?method=getDataList&table=<%=table%>";
			store.proxy.conn.url = url;
			store.load({params:{start:0, limit:PageSize}});
		}
		
		dr.render('dr');
		
	
		
		Ext.get('query_start_time').on('click',function(){
			WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm',maxDate:'#F{$dp.$D(\'query_start_time\')}'});
		});
		
		Ext.get('query_end_time').on('click',function(){
			WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm',minDate:'#F{$dp.$D(\'query_end_time\')}'});
		});		
		
	});
</script>
<body>

<div id="dr" style="width:100%;height:auto;"></div>
<div id='grid-div' style="width:100%; height:80%;"></div>
</body>
</html>
