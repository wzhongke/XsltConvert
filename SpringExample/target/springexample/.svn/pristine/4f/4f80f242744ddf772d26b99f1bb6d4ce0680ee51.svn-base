<%@ page language="java" contentType="text/html; charset=GBK"
    pageEncoding="GBK"%>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=GBK">
	<title>VR白名单记录列表</title>
</head>

<script type="text/javascript">
	Ext.namespace('Ext.exampledata');
	Ext.onReady(function(){
		var exportConditionUrl = 'vr_white.do?method=getVrFixrankList';
		
		//创建新增或单独修改表记录信息的form表单
		Ext.QuickTips.init();
		Ext.form.Field.prototype.msgTarget = 'side';//统一指定错误信息提示方式
		//定义数据集对象
		var store = new Ext.data.Store({//配置分组数据集
			//autoLoad :true,
			reader: new Ext.data.XmlReader({
				totalRecords: "results",
				record: "VRWhiteRecord",
				id: "id"
			},
			Ext.data.Record.create([
				{name: 'id'},
				{name: 'classid'},
				{name: 'keyword'},
				{name: 'rank'},
				
				{name: 'start_time', type: 'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'end_time', type: 'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'submitter'},
				{name: 'create_time', type: 'date', dateFormat: 'Y-m-d H:i:s'},
				{name: 'modify_time', type: 'date', dateFormat: 'Y-m-d H:i:s'},

				{name: 'synch_status'},
				{name: 'info'},
				{name: 'isAdd'}
			])
			),
			proxy : new Ext.data.HttpProxy({
				url : 'vr_white.do?method=getRecordList'
			}),
			sortInfo: {field: 'id', direction: 'DESC'},
	  		remoteSort: true
		})
		//定义分组数据集对象
		var vrOnlyTypeStore = new Ext.data.Store({//配置分组数据集
			reader: new Ext.data.XmlReader({
				totalRecords: "results",
				record: "VRTypeRecord",
				id: "classid"
			},
			Ext.data.Record.create([
				{name: 'classtag'},
				{name: 'classid'},
				{name: 'chname'},
				{name: 'vrtemplate_tplid'}
			])
			),
			proxy : new Ext.data.HttpProxy({
				url : 'webUIS.do?method=getVROnlyTypeList'
			}),
			sortInfo: {field: 'VRType', direction: 'DESC'},
	  		remoteSort: true
		})
    	vrOnlyTypeStore.load({
    		callback: function() {
    			store.load({params:{start:0, limit:18}});
    		}
    	});
		//定义分组数据集对象
		var vrOnlyTypeStore_query = new Ext.data.Store({//配置分组数据集
			reader: new Ext.data.XmlReader({
				totalRecords: "results",
				record: "VRTypeRecord",
				id: "classid"
			},
			Ext.data.Record.create([
				{name: 'classtag'},
				{name: 'classid'},
				{name: 'chname'},
				{name: 'vrtemplate_tplid'}
			])
			),
			proxy : new Ext.data.HttpProxy({
				url : 'webUIS.do?method=getVROnlyTypeList4query'
			}),
			sortInfo: {field: 'VRType', direction: 'DESC'},
	  		remoteSort: true
		})


		<%//根据权限信息显示工具栏
		StringBuffer toolbar_str = new StringBuffer();
    	toolbar_str.append("{text : '新增',iconCls:'add',handler : showAdd},");
    	toolbar_str.append("{text : '修改',iconCls:'option',handler : showModify},");
    	toolbar_str.append("{text : '删除',iconCls:'remove',handler : showDelete},");
	    
	    toolbar_str.deleteCharAt(toolbar_str.length()-1);
	    %>
		//创建工具栏组件
		var toolbar = new Ext.Toolbar([
		    <%=toolbar_str.toString()%>
		]);
		//创建工具栏组件
		var popupToolbar = new Ext.Toolbar([
			{text : '覆盖',iconCls:'option',handler : showConfirm},
			{text : '返回',iconCls:'batch-remove',handler : function (){
				popupWin.hide();
			}}
		]);
		//popupToolbar.addText('hehe');
		//将 是否封禁首页和是否留首封站 的代码解析成 文本
		function booleantag(val){
	        if(val == 1){
	            return '是';
	        }else if(val == 0){
	            return '否';
	        }else
		        return '';
    	}
    	//rendererid=1限制级别渲染器;	rendererid=2匹配规则渲染器
		function superRenderer(val,rendererid){
			if( rendererid == 1 )
				var datalist = Ext.exampledata.masklevel_list;
			else
				var datalist = Ext.exampledata.matchrule_list;
			var num = datalist.length;
			for(var i=0;i<num;i++){
				var tmpobj = datalist[i];
				if(tmpobj[0]==val)
					return tmpobj[1];
			}
		}
		function typeRenderer(val){
			return superRenderer(val,1);
		}
		function match_typeRenderer(val){
			return superRenderer(val,2);
		}

		//将 是否封禁首页和是否留首封站 的代码解析成 文本,并为新值着色
		function booleantag_confirm(val){
	        if(val == 1){
	            return '<span style="color:red;">是</span>';
	        }else if(val == 0){
	            return '<span style="color:red;">否</span>';
	        }else
		        return '';
    	}
		function confirm(val){
	        return '<span style="color:red;">'+val+'</span>';
    	}
    	//创建分页工具栏
    	var pagingBar = new Ext.PagingToolbar({
        	id : 'pagingBar',
	        pageSize: 18,
	        store: store,
	        displayInfo: true,
	        displayMsg: '显示 {0} - {1} , 共 {2} 条记录    ',
	        emptyMsg: "没有任何记录",
	        items:['-']
    	});
		//创建Grid表格组件
		var cb = new Ext.grid.CheckboxSelectionModel();
		//创建Grid表格组件
		var popupCb = new Ext.grid.CheckboxSelectionModel();
		//创建过滤器
		var filters = new Ext.grid.GridFilters({
		  filters:[
		    {type: 'numeric',  dataIndex: 'id'},
		    {type: 'string',  dataIndex: 'url'},
		    {type: 'boolean', dataIndex: 'tag_block'},
		    {type: 'boolean', dataIndex: 'tag_reversible'},
		    {
		      type: 'list',  
		      dataIndex: 'extra_attr', 
		      options: ['无价值', '死链', '非中文'],
		      phpMode: true
		    },
		    {type: 'string',  dataIndex: 'user'},
		    {type: 'date',  dataIndex: 'sub_date'},
		    {type: 'string',  dataIndex: 'info'}
		]});


		//开始查询表单部分
		var dr = new Ext.FormPanel({
	    	labelWidth: 125,
	        frame: true,
	  	  	bodyStyle:'padding:5px 5px 0',
	  	  	labelAlign: 'left',
	  	  	autoScroll: true,
			width: 960,
	        defaults: {width: 175},
	      	//增加表单键盘事件
	        keys:[
	         {
	             key: [10,13],
	             fn:query
	         } ],
	         items: [{
			        	xtype:'textfield',
						width : 400,
						id : 'query_keyword',
						name : 'query_keyword',
						fieldLabel:'关键词'
			        },
			        {
			            layout:'column',
			            width : 800,
			            border:false,
			            items:[
			                {
			                    columnWidth:.5,
			                    layout: 'form',
			                    border:false,
			                    items: [{
			                        xtype:'radio',
			                        fieldLabel:'查找方式',
			                        checked: true,
			                        boxLabel:'精确查找',
			                        name:'query_matchType',
			                        anchor:'100%',
			                        inputValue: 1
			                    }]
			                },
			                {   
			                    columnWidth:.5,
			                    layout: 'form',
			                    border:false,
			                    items: [{
			                        xtype:'radio',
			                        boxLabel:'模糊查找',
			                        hideLabel: true,
			                        name:'query_matchType',
			                        anchor:'100%',
			                        inputValue: 0
			                    }]
			                }
			              ]
		            },{
			            layout:'column',
			            width : 930,
			            border:false,
			            items:[
			                    {
			                        layout:'form',
			                        columnWidth:.35,
			                        border:false,
			                        items:[
			                                {
		                                	xtype:'combo',
		                                	fieldLabel:'VR类型',
		                                	name : 'query_classid',
		                                	width : 150,
		                                	hiddenName : 'query_classid',
		                                	store: vrOnlyTypeStore_query,//删除网页固排,
		                                	displayField:'chname',
		                                	valueField: 'classid',
		                                	typeAhead: true,
		                                	forceSelection: true,
		                                	triggerAction: 'all',
		                                	emptyText:'请选择其中一种...',
		                                	selectOnFocus:true,
		                                	value: '全部',
		                                	mode: 'remote'
			                                }
			                        ]
			                    }
			                ]
			        }],
			buttons:[
				{
					text : '查询',
					handler : function(){
						query(true);
					}
				},
				{
					text : '返回',
					handler : function(){
						query(false);
					}
				}
			]
	      });

		
		var recordGrid = new Ext.grid.GridPanel({
			applyTo : 'grid-div',
			tbar : toolbar,
			frame:true,
			loadMask: true,
			//plugins: filters,
			autoScroll: true,
			//width: 960,
			autoWidth:true,
			store: store,
			viewConfig : {
				autoFill : true
			},
			sm : cb,
			columns: [//配置表格列
	          	new Ext.grid.RowNumberer({
					header : '行号',
					width : 40
				}),//表格行号组件
				cb,
				{header: "编号", width: 40, dataIndex: 'id'},
				{header: "关键词", width: 130, dataIndex: 'keyword'},
				{header: "VR类型", width: 60, dataIndex: 'classid', renderer: classid_renderer},
				{header: "期望排名", width: 40, dataIndex: 'rank'},
				{header: "是否添加词表", width: 40, dataIndex: 'isAdd'},
				{header: "上线时间", width: 100, dataIndex: 'start_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')},
				{header: "下线时间", width: 100, dataIndex: 'end_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')},
				{header: "提交者", width: 100, dataIndex: 'submitter'},
				{header: "创建时间", width: 100, dataIndex: 'create_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')},
				{header: "最后更新时间", width: 100, dataIndex: 'modify_time', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')}
			],
			
	        // paging bar on the bottom
	        bbar: pagingBar
			
		});
		// trigger the data store load
    	store.load({params:{start:0, limit:18}});

		
		var inputForm = new Ext.FormPanel({
			labelSeparator : ":",
			frame:true,
			border:false,
			autoHeight: true,
			items : [
				 {
					xtype:'textarea',
					width : 200,
					height : 250,
					name : 'keyword',
					fieldLabel:'<font color=red>*</font>关键词<br><font color=red>（输入条目上限为100条，每个词条关键词归一化后长度超过80\"字节\"为不合法）</font>',
					allowBlank : false
				},{
					xtype:'combo',
		        	fieldLabel:'<font color=red>*</font>VR类型',
		        	id: 'input_classid',
		        	name : 'classid',
		        	width : 150,
		        	allowBlank : false,
		        	blankText : '分类为必填项',
		        	hiddenName : 'classid',
		        	store: vrOnlyTypeStore,
		        	displayField:'chname',
		        	valueField: 'classid',
		        	typeAhead: true,
		        	forceSelection: true,
		        	triggerAction: 'all',
		        	emptyText:'请选择其中一种...',
		        	selectOnFocus:true,
		        	mode: 'remote',
		        	listeners:{select:{fn:function(combo, value) {
		            		Ext.getCmp('classtag').setValue( value.get('classtag') );
		            		if(value.get('classtag')=="INTERNAL.NEWS.ALL")
		            			Ext.getCmp('rank').maxValue = 50;
		            		else
		            			Ext.getCmp('rank').maxValue = 10;
		            
		                }}
		            }		     
				},{
					xtype:'numberfield',
					minValue: 1,
					maxValue: 10,
					allowDecimals: false,
					width : 150,
					allowBlank : false,
					blankText : '期望排名不能为空',
					name : 'rank',
					id:'rank',
					fieldLabel:'<font color=red>*</font>期望排名1-10',
					value:4
				},
				{
                	xtype: 'radio',
                    fieldLabel: '<font color=red>*</font>加入VR词表:',
                    labelSeparator: '',
                    boxLabel: '是',
                    name: 'word_add',
                    inputValue: 1
                },{
                	xtype: 'radio',
                    fieldLabel: '',
                    checked: true,
                    labelSeparator: '',
                    boxLabel: '否',
                    name: 'word_add',
                    inputValue: 0
                },				
				{
                	xtype:'textfield',
                	allowBlank : false,
                	id : 'start_time_string',
					name : 'start_time_string',
					fieldLabel:'<font color=red>*</font>上线日期',
					cls:'Wdate',
					value: getTimeAfterNow(0)
                },{
					xtype:'textfield',
					allowBlank : false,
					id : 'end_time_string',
					name : 'end_time_string',
					fieldLabel:'<font color=red>*</font>下线日期',
					cls:'Wdate',
					value: getTimeAfterNow(60*24*1)
		        },{
					xtype:'hidden',
					name : 'id'
				},{
					xtype:'hidden',
					name : 'classtag',
					id : 'classtag'
				}
			],
			buttons:[
				{
					text : '提交',
					handler : submitForm
				},
				{
					text : '关闭',
					handler : function(){
						win.hide();
					}
				}
			]
		});
		/*创建批量修改表单*/
		var batchForm = new Ext.form.FormPanel({
			labelSeparator : ":",
			frame:true,
			border:false,
			autoHeight: true,
			items : [
				{
                	xtype:'textfield',
                	id : 'batch_start_time_string',
					name : 'batch_start_time_string',
					fieldLabel:'<font color=red>*</font>上线日期',
					cls:'Wdate'
                },{
					xtype:'textfield',
					id : 'batch_end_time_string',
					name : 'batch_end_time_string',
					fieldLabel:'<font color=red>*</font>下线日期',
					cls:'Wdate'
		        },{
					xtype:'label',
				    html:"<font color=red size=2>注：日期字段留空则保持原值</font>"
				},{
					xtype:'hidden',
					name : 'batch_ids',
					id : 'batch_ids'
				}
			],
		    buttons:[
		        {
		            text : '提交',
		            handler: function() { 
				    	 if( batchForm.form.isValid() ){

				    		ids = document.getElementById("batch_ids");
				    		ids.value = getCheckedIdList();
					    	
					    	batchForm.getForm().submit({
						    	url: "vr_white.do?method=batchModifyRecord",
						    	waitMsg : '正在上传数据请稍后',//提示信息
								waitTitle : '提示',//标题 
						        success: function(form, action){
					    			batchWin.hide();
					    			store.load({params:{start:0, limit:18}});
						        }, 
						        failure: function(form, action){
						        	batchWin.hide();
									var failcause = action.result.cause;
									Ext.MessageBox.show({
							           title: '提示',
							           msg: '批量操作VR白名单记录失败。原因是:<br><br>'+failcause,
							           buttons: Ext.MessageBox.OK,
							           icon: Ext.MessageBox.ERROR
							        });
						           store.load({params:{start:0, limit:18}});
						        }
					      	}); 
				    	 }//if( batchForm.form.isValid() ){
				     }
		        },
		        {
		            text : '关闭',
		            handler : function(){
		        		batchWin.hide();
		            }
		        }
		    ]
		});
		//删除原有窗口对象
		win = Ext.getCmp('input_window');
		if(win){
			win.destroy();
		}
		//删除原有窗口对象
		batchWin = Ext.getCmp('batchinput_window');
		if(batchWin){
			batchWin.destroy();
		}
		
		var win = new Ext.Window({
			id: 'input_window',
			layout:'fit',
		    width:380,
		    closeAction:'hide',
			resizable : false,
			shadow : true,
			modal :true,
		    closable:true,
		    bodyStyle:'padding:5 5 5 5',
		    animCollapse:true,
			items:[inputForm]
		});
		
		//创建批量弹出窗口
		var batchWin = new Ext.Window({
			id: 'batchinput_window',
			layout:'fit',
		    width:470,
		    closeAction:'hide',
			resizable : false,
			shadow : true,
			modal :true,
		    closable:true,
		    bodyStyle:'padding:5 5 5 5',
		    animCollapse:true,
			items:[batchForm]
		});
		
		//显示新建VR白名单记录窗口
		function showAdd(){
			inputForm.form.reset();
			inputForm.isAdd = true;
			win.setTitle("新增VR类数据白名单");
			win.show();
			bindingPicker();
		}
		String.prototype.replaceAll  = function(s1,s2){    
			return this.replace(new RegExp(s1,"gm"),s2);    
		}
		//显示批量修改表记录窗口
		function showBatchModify(list){
			var keyword_string = list.toString().replaceAll(",","\n");
			batchForm.form.reset();
			batchForm.isAdd = true;
			batchWin.setTitle("批量修改VR白名单上下线时间");
			batchWin.show();
			
			Ext.get('batch_start_time_string').on('click',function(){
				WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm:ss'});
			});
			Ext.get('batch_end_time_string').on('click',function(){
				WdatePicker({      skin:'ext',    dateFmt:'yyyy-MM-dd HH:mm:ss',    minDate: getTimeAfterNow(0)    });
			});
		}
		//显示修改VR白名单记录窗口
		function showModify(){
			var recordList = getCheckedIdList();
			var num = recordList.length;
			if(num > 1){
				showBatchModify(recordList);
				//Ext.MessageBox.alert("提示","每次只能修改一条记录信息。")
			}else if(num == 1){
				inputForm.isAdd = false;
				win.setTitle("修改记录信息");
				win.show();
				bindingPicker();
				var recordId = recordList[0];
				loadForm(recordId);
			}
		}
		function bindingPicker(){
			Ext.get('start_time_string').on('click',function(){
				WdatePicker({skin:'ext',dateFmt:'yyyy-MM-dd HH:mm:ss',	maxDate:'#F{$dp.$D(\'end_time_string\')}'  });
			});
			Ext.get('end_time_string').on('click',function(){
				WdatePicker({      skin:'ext',    dateFmt:'yyyy-MM-dd HH:mm:ss',    minDate:'#F{$dp.$D(\'start_time_string\')}'    });
			});
		}
		//显示删除VR白名单记录对话框
		function showDelete(){
			var recordIdList = getCheckedIdList();
			var num = recordIdList.length;
			if(num == 0){
				return;
			}
			Ext.MessageBox.confirm("提示","您确定要删除所选记录吗？",function(btnId){
				if(btnId == 'yes')
					deleteRecord(recordIdList);
			})
		}
		//显示批量覆盖确认VR白名单记录对话框
		function showConfirm(){
			//二维数组：元素的格式是5个字段：id，confirm_tag_block，confirm_tag_reversible，confirm_reserve_id_str，confirm_extra_attr
			var recordIdList = getCheckedContentList();
			var num = recordIdList.length;
			var param = '';
			if(num == 0){
				return;
			}
			for(var i=0;i<num;i++){
				var tmpobj = recordIdList[i];
				param = param + tmpobj.toString() + '-=-';
			}
			Ext.MessageBox.confirm("提示","您确定要覆盖所选记录吗？",function(btnId){
				if(btnId == 'yes')
					doConfirmRecord( param );
			});
			
		}
		//显示删除VR白名单记录对话框
		function showBatchDelete(){
			batchForm.form.reset();
			batchForm.form.url = "vr_white.do?method=deleteBatchDomain";
			batchForm.isAdd = true;
			batchWin.setTitle("Domain文件上传表单");
			batchWin.show();
		}
		//删除VR白名单记录
		function deleteRecord(recordIdList){
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在删除VR白名单记录信息请稍后......'
			});
			Ext.Ajax.request({
				url : 'vr_white.do?method=deleteRecord',
				params : {recordIdList : recordIdList.toString()},
				method : 'POST',
				success : function(response,options){
					msgTip.hide();
					var result = Ext.util.JSON.decode(response.responseText);
					if(result.success){
						//服务器端数据成功删除后，同步删除客户端列表中的数据
						store.load({params:{start:0, limit:18}});
						Ext.Msg.alert('提示','删除VR白名单记录信息成功。');
					}else{
						Ext.Msg.alert('提示','该VR白名单记录已包含'+result.num+'本书籍信息不能删除！');
					}
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','删除VR白名单记录请求失败！');
				}
			});
		}
		//加载表单数据
		function loadForm(recordId){
			inputForm.form.load({
				waitMsg : '正在加载数据请稍后',//提示信息
				waitTitle : '提示',//标题
				url : 'vr_white.do?method=getRecordById',//请求的url地址
				params : {recordId : recordId},
				method:'GET',//请求方式
				success:function(form,action){//加载成功的处理函数	
					if(action.result.data.classtag=="INTERNAL.NEWS.ALL"){
					   	Ext.getCmp('rank').maxValue = 50;
				    }else
			           	Ext.getCmp('rank').maxValue = 10;				
				},
				failure:function(form,action){//加载失败的处理函数
					Ext.Msg.alert('提示','数据加载失败');
				}
			});
			
			
			//alert(Ext.getCmp('input_classid').getValue());
			/*
			if(Ext.getCmp('classid').getValue()=="INTERNAL.NEWS.ALL")
	        	Ext.getCmp('rank').maxValue = 50;
	        else
	           	Ext.getCmp('rank').maxValue = 10;
			*/
		}
		//提交表单数据
		function submitForm(){
			//判断当前执行的提交操作，isAdd为true表示执行VR白名单记录新增操作，false表示执行VR白名单记录修改操作
			if( inputForm.form.isValid() ){
				if(inputForm.isAdd){
					//新增VR白名单记录信息
					inputForm.form.submit({
						clientValidation:true,//进行客户端验证
						waitMsg : '正在提交数据请稍后',//提示信息
						waitTitle : '提示',//标题
						url : 'vr_white.do?method=addRecord',//请求的url地址
						method:'POST',//请求方式
						success:function(form,action){//加载成功的处理函数
							win.hide();
							var failcause = action.result.cause;
							var conflict = action.result.conflict;
							conflict = ReplaceAll(conflict,'<br>', '\n');
							conflict = ReplaceAll(conflict,'<BR>', '\n');
							Ext.MessageBox.show({
					           title: '提示',
					           msg: '完成新增VR白名单记录操作。<br><br><br>' + failcause + '，包括如下记录：<br><textarea rows="10" cols="45" readonly="true">关键词  原排名  现排名  VR类别\n\n' + conflict + '</textarea>', 
					           buttons: Ext.MessageBox.OK,
					           icon: Ext.MessageBox.INFO
					        });
							store.load({params:{start:0, limit:18}});
						},
						failure:function(form,action){//新增失败的处理函数
							win.hide();
							Ext.MessageBox.show({
					           title: '提示',
					           msg: '新增VR白名单记录失败。原因是:<br>输入关键词条数超过上限100条或提交超时',
					           buttons: Ext.MessageBox.OK,
					           icon: Ext.MessageBox.ERROR
					        });
						}
					});
				}else{
					//修改VR白名单记录信息
					inputForm.form.submit({
						clientValidation:true,//进行客户端验证
						waitMsg : '正在提交数据请稍后',//提示信息
						waitTitle : '提示',//标题
						url : 'vr_white.do?method=modifyRecord',//请求的url地址
						method:'POST',//请求方式
						success:function(form,action){//加载成功的处理函数
							win.hide();
							store.load({params:{start:0, limit:18}});
							Ext.Msg.alert('提示','修改VR白名单记录成功');
						},
						failure:function(form,action){//加载失败的处理函数
							var failcause = action.result.cause;
							Ext.MessageBox.show({
					           title: '提示',
					           msg: '修改VR白名单记录失败。<br>'+failcause,
					           buttons: Ext.MessageBox.OK,
					           icon: Ext.MessageBox.WARNING
					        });
						}
					});
				}
			}//if( inputForm.form.isValid() )
		}
		//取得表单数据
		function getFormFieldsObj(domainRecordId){
			var fields = inputForm.items;
			var obj = {};
			for(var i = 0 ; i < fields.length ; i++){
				var item = 	fields.itemAt(i);
				var value = item.getValue();
				obj[item.name] = value;
			}
			if(Ext.isEmpty(obj['id'])){
				obj['id'] = domainRecordId;
			}
			//补充另外两个属性tag_block和tag_reversible
			if( Ext.getCmp('tag_block_group').items.get(0).checked )
				obj['tag_block'] = 1 ;
			else
				obj['tag_block'] = 0 ;
			if( Ext.getCmp('tag_reversible_group').items.get(0).checked )
				obj['tag_reversible'] = 1 ;
			else
				obj['tag_reversible'] = 0 ;
			return obj;
		}
		//取得所选域名记录信息
		function getCheckedIdList(){
			var recs = recordGrid.getSelectionModel().getSelections();
			var list = [];
			if(recs.length == 0){
				Ext.MessageBox.alert('提示','请选择要进行操作的记录！');
			}else{
				for(var i = 0 ; i < recs.length ; i++){
					var rec = recs[i];
					list.push(rec.get('id'));
				}
			}
			return list;
		}

		
		//开始查询代码
		function query(tag){
			//新增VR白名单记录信息
			var query_keyword ;
			if(tag)
				query_keyword = document.getElementById("query_keyword").value;
			else{
				query_keyword = '';
				document.getElementById("query_keyword").value='';
			}
			
			var query_matchType;
			if(document.getElementsByName("query_matchType")[0].checked)
				query_matchType = 1;
			else
				query_matchType = 0;

			var query_classid = document.getElementsByName("query_classid")[0].value;
			
			var url = "vr_white.do?method=getRecordList&query_keyword="+encodeURIComponent(query_keyword)+"&query_matchType="+query_matchType
			+"&query_classid=" + encodeURIComponent(query_classid);

			store.proxy.conn.url = url;
			store.load({params:{start:0, limit:18}});
		}
		//线上同步词表
		function synchronize(){
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在向线上发送VR白名单同步信号，请稍候......'
			});
			Ext.Ajax.request({
				url : 'frontWebpage.do?method=deploy',
				params : {deploytype : 'front'},
				method : 'POST',
				success : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','词表线上同步中...');
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','词表线上同步失败！');
				}
			});
		}
		//导出Excel
		function exportExcel(){
			var msgTip = Ext.MessageBox.show({
				title:'提示',
				width : 250,
				msg:'正在导出VR白名单记录信息请稍候（上限1w条）......'
			});
			Ext.Ajax.request({
				url : 'vr_white.do?method=exportFrontWebpage',
				params : {storeUrl : Ext.util.JSON.encode(exportConditionUrl) },
				method : 'POST',
				success : function(response,options){
					msgTip.hide();
					window.location = '<%=request.getContextPath()%>/blacklist_front.xls';
					var result = Ext.util.JSON.decode(response.responseText);
				},
				failure : function(response,options){
					msgTip.hide();
					Ext.Msg.alert('提示','导出VR白名单记录请求失败！');
				}
			});
			
		}
		function getTimeAfterNow(after_mnt){ //当前日期后after_mnt分钟
			var clock = '';
		    var now = new Date();
		    now.setMinutes(now.getMinutes()+after_mnt);
		    
		    var yy = now.getFullYear(); 
		    var month = now.getMonth()+1;
		    var dd = now.getDate();

		    clock = yy + '-';
		    if (month < 10) clock += '0'; 
		    clock += month+'-'; 
		    if (dd < 10) clock += '0'; 
		    clock += dd+' '; 
		    
		    var hh = now.getHours(); 
		    var mm = now.getMinutes(); 
		    var ss = now.getTime() % 60000; 
		    ss = (ss - (ss % 1000)) / 1000; 

		    if (hh < 10) clock += '0'; 
		    clock += hh+':'; 
		    if (mm < 10) clock += '0'; 
		    clock += mm+':'; 
		    if (ss < 10) clock += '0'; 
		    clock += ss; 
		    return(clock); 
		}
		function classid_renderer(val, p, record){
			if(vrOnlyTypeStore.getById(val)!=null)
				return vrOnlyTypeStore.getById(val).get('chname');
			else
				return '加载中...';
		}

		function ReplaceAll(str, sptr, sptr1)
		{
			while (str.indexOf(sptr) >= 0)
			{
			   str = str.replace(sptr, sptr1);
			}
			return str;
		}
	    dr.render('dr');
	});
</script>
<body>
<div id="dr" style="width:100%;height:25%;"></div>
<div id='grid-div' style="width:100%; height:75%;"></div>
</body>
</html>